## 這是什麼
  這是一個軟體，解譯一個程式語言MIP(macro interactive processing)， 
  並自帶編輯界面，用在快速生產商用程式，所以本軟體稱為MIP builder。 
  它內建幾十個既定動詞，所以它能操控電腦主機， 
  它認得模板(巨集、宏、macro)，所以它能組合模板變成其他語言去操控主機。
  .
  它是一個script解譯器，能立即產出互動網頁，也能在背景連接資料庫；
  也是一個macro 組合器，能組合變數與模板產生另一程式並且執行。
  它是一個語言，是一個工具，用來縮短程式碼，提升資訊人員的生產力。
  .
## 適用場合  
  在多年前，我看到有資訊人員每天都在下SQL指令，在應付使用者的各種需求，
  他說使用者的需求變來變去很難寫成程式，要是有一個網頁型的SQL輸入框，
  讓他調整參數，調到滿意存起來就成為使用者的功能，這樣才好過日子。
  於是我作了一個生產程式的母機，用在製作商業應用系統，這就是MIP的前身。
  本文將舉兩個MIP應用範例: 庫存撿貨系統，問卷評分系統。
  .
  這幾年來，資訊界流行一些越來越長的程式語言，表達一個動作變得很費力，
  以c#或java為例，為了一句SQL要先念念有詞繞一圈長咒語，才說我要跑SQL。
  這咒語是要增加人的煩惱嗎，何不打造一個語言能辨識巨集、宏、macro，
  我們直接說人話，直接下SQL呢。用MIP寫一個查資料的程式不會超過5行。
  所以MIP也可以是模板組合器、巨集組合器，可進行巨集編程。
  .
  這幾年流行的程式語又更長了，程式中不斷宣告物件的屬性。
  1個屬性佔1行，1個物件有9個屬性，5個物件就45行，這些物件都長得很像，
  整篇程式看起來就幾個字不斷的繞口令。難道我們不能把它排成9乘5的矩陣，
  讓表達簡潔嗎?所以我們應該讓MIP有操作矩陣的能力，
  助你從一行一行寫程式的一維視角，轉為一矩一矩寫程式的二維視角，程式變短。
  例如要寫個圍棋的圖形辨認很麻煩，但如果把圍棋的棋子點位描述成二維矩陣，
  用MIP 來寫圖形比對，程式很短。
  .
  MIP用途不僅在縮短一支程式，而是縮短幾十支程式。當你有幾十支程式要寫，
  你找出這幾十支程式共同的部份，分離出相異的部份，把相異的部份排成矩陣，
  呼叫MIP，它就幫你生成，一次生成幾十支程式。程式師心存簡化語言的願望，
  把幾十支程式變一支，幾十行程式變一行，MIP實現這願望。
  本說明手冊將從MIP的基本指令說起，延伸談到高級應用。
  .
## 語言的特點
 (特點1 網頁輸入輸出)
    它的預設操作環境是網頁，輸入是網頁，輸出也是網頁。
    輸出網頁裏還可以有輸入框，讓你再輸入下一波，得到下一波的輸出。
    所以它運作起來就是一個完整的應用功能。當然輸出也可以是文字檔，
    例如輸出資料查詢結果到檔案，以方便傳遞給另一電腦。
    例如輸入你自定的方言，它就翻譯成目標語言，存成檔案方便下一波執行。
  . 
 (特點2 巨集函數)
    凡是MIP看到  "短字 等於 一串字"， 就認為是賦值給短字，
    若短字是內建已定字，那麼MIP執行已定動作，例如操作SQL，或發http給其它電腦。
    若短字非內建已定字，那就是你在定義了一個短字，代表那一串字。
    當這串字是篇文章，你可以進行模板組合，當這串字是指令，你可以進行巨集編程。
    一般的巨集編程一旦值定義之後就固定住。在MIP裏面值可以變動。
    一般的巨集編程指令只能往下，不能goto跳躍。MIP除了goto 還有gosub跳去返回，
    還有if-then-endif，以及for-next，所以MIP不只是一個巨集語言(宏語言)，
    而是一個描述語言(script language)。
  .
 (特點3 向量式指令)
    變數只能置換一字一詞，代稱詞可以置換一整個向量，或置換一整個矩陣，
    例如在SQL常寫 姓名=csName, 住宅電話=csTELE, 手機=csMobi, 地址=csAddr ...    
    在MIP只要寫 ve( fdTiTL=fdName )er 。 這 ve(...)er 就是向量句。 
    用了代稱詞向量句，以後只要改實際向量值，一個程式模板可用於幾十支程式。
  .
 (特點4 外接任意引擎)
    MIP擅於立即組合模板，把組合出來的文字傳給執行引擎，再接收結果顯示出來。
    最常搭配的引擎是資料庫引擎，不管哪一種資料庫，傳SQL句子給它，接收結果。
    顯示結果時有各種樣式，並且可以顯示成接著輸入，讓使用者輸入下一波。
    MIP也可以搭配C編譯器，編譯文字立刻執行。這時MIP像是個預編巨集(宏)。
    MIP也可以搭配java引擎，產出jsp給java引擎，執行後接收結果。
    MIP也內建就有http遞送句，傳訊給外機執行後接收結果。
    
  
## 安裝  
  本軟體目前只能在windows+IIS作業環境下使用，
  請到 https://github/longinlin/MIP3.1 點擊畫面上的[view code]下載全部檔案，
  複製到你的電腦的一個資料夾裏面(舉例c:\MIP\webc)。
  打開IIS管理員，在IIS裡建立虛擬目錄MIP，實際位置指向 c:\MIP\webc
  微軟IIS換版常讓人安裝受挫，若安裝不順，冒火之餘， 請看文末的'安裝問題集解'。
  開瀏覽器，網址localhost/MIP/MIP.aspx ，看到有畫面 請輸入帳密 即安裝完成。

## 寫簡單的程式
  (例一)打開瀏覽器，網址打localhost/MIP/MIP.aspx，看到 請輸入帳密，
  打入帳密(admin,admin9)，網頁畫面變成上下兩個輸入框，上框參數區，下框程式區。
  於下框寫 
    show== Hello world !
  按[確定] 即可看到結果
  
  (例二)寫一個簡單的加法
  於下框寫
    aabb==eval| 10+5
    ccdd==dateadd||5
    show==aabb , ccdd
  按[確定]即可看到 15 逗點 今天加5天的日期
  其中eval是一個任意加減乘除函數， 直線符號後面是函數的參數
  
  (例三)乘法
  於下框寫
    show==eval|3*5
  按[確定]即可看到 15 
  
  (例四)九九乘法表
  於下框寫
    uuuu==1,2,3
    vvvv==4,5,6
    show==gu2vx|uuuu|vvvv| [ui]x[vi]=@[eval|[ui]*[vi]]# |td 
  按[確定]即可看到九九乘法表之一部份:
    1x4=4  2x4=8  3x4=12  4x4=16
    1x5=5  2x5=10 3x5=15  4x5=20
  其中 @[...]# 是把函數放在字裏行間的表達法。
  @  這個符號看起來像ca， 此處可以唸作call, 
  ]# 用來表示函數結束
     
## 呼叫資料庫(SQL)， 或呼叫作業系統(DOS指令)
  於下框寫
    conndb==vini
    sqlcmd==select * from mapper
  按[確定]即可看到 tb2 的內容。

  要呼叫DOS指令，則於下框寫
  doscmd==
    echo 123 > c:\tmp\test2.txt
    echo 456 > c:\tmp\test3.txt
  exit==done    
  按[確定]即執行兩行echo，讀者可以到 c:\tmp 看結果
  這裏可以看到'等於等於'右方沒有字，於是MIP往下收集字。
  最後遇到exit就是顯示結束語並且結束。
   
## 輸入、運算、輸出
  所有的電腦程式都可分解為(輸入、運算、輸出)三段，在MIP如何表達呢?
 
  於上框寫 name2==John             這就是輸入
  於下框寫 add99==add|2|3          這就是運算
  下框再寫 show==name2, 2+3=add99  這就是輸出
  按[確定]後，畫面出現 John, 2+3=5 輸出到螢幕上
  
  如果要輸出到檔案呢? 
  於上框寫 name2==John           
  於下框寫 
    add99 ==add|2|3       
    answ  ==name2, 2+3=add99
    saveToFile, a123.txt ==answ
  按[確定]就會輸出到檔案c:/MIP/webc/a123.txt 。 
  
## 編輯 使用者看到的畫面
  (輸入、運算、輸出)三段都有了，想把以上的程式變成一般人使用的功能，怎麼做?
  看到螢幕最下方還有兩個細細的輸入框，分別填上 test2.mip 和 測試2，
  再按[save new   ]，網頁就會顯示'儲存完成'，
  再按[show spList]，網頁就會顯示'測試2' 就是你剛剛製造的程式。
  
  存起來的test2.mip內容是什麼呢? 可以用文字編輯器打開來看，
  用windows內建的記事本，打開test2.mip，看到內容如下:
    name2==John
    #1#2
    add99 ==add|2|3       
    answ  ==name2, 2+3=add99
    saveToFile, a123.txt ==answ
  MIP自動加了一行#1#2，這意思是#1#2之上段對應上框，下段對應下框。 
  當這程式給使用者用時，上框文字將變成他填資料的輸入畫面，下框文字他看不到。

  你能作以上動作，因為當初你是用admin的身分登入，進入了'工程師模式'。 
  若用別的身分登入，就進入'使用者模式'，這時只能看到功能，看不到程式。
  現在請你從功能列表中選擇[登出]，螢幕畫面變成 請你輸入帳密，
  輸入帳密(0800,0809)後， 你看到網頁畫面中有一個 [測試2]的超連結。
  現在你可以點擊它，任意操作功能。這就是使用者模式。
  
  在'使用者模式'下，程式裏的上框會變成輸入區，讓使用者填資料。
  你可以用記事本編輯 test2.mip ，對輸入區做點變化，例如
        名字== 
        電話==
        #1#2    
        show==知到了 名字 電話
  多種輸入區變化請看 ##輸入畫面集解。
  
## 發揮MIP的功能
  從上面的例子可以看到==是指定符號，
  符號左右方可以任意空白，這些前後空白都會切掉(trim)不要管它。
  不要在乎左右方是數字或文字，因為本軟體裏面只有一種資料型態，那就是文字。
  你要在乎文字往上可以建立一維序列，就是向量，往上可以建立二維序列，就是矩陣，
  幾十行文字可以組成一段文章，就是程式模板。
  本軟體在乎文字、向量、矩陣、程式模板的各種組合。

  要發揮MIP的功能，讓我們分幾個小段落逐步介紹。
  首先瞭解: 變數、既定字、函數、@函數、2@中置函數
  接著瞭解: 洗染、解函、解罩
  接著瞭解: for-next, if-endif, generally, gosub
  接著瞭解: 代稱詞函數: gu1v, gu2v, gu2vx, gu1m, sqlcmd, show  
  進階瞭解: 跨資料庫傳輸、資料直轉橫(在Excel稱為樞紐分析)
  進階瞭解: 管理程式群: 功能清單、 使用者清單、 資料庫清單
  這樣就介紹完整，接著的程式就看讀者自由發揮了。
 
  以下就從變數開始說明。

  
## 變數 
  寫個三行的程式:
      x002==2
      x003==3
      show==x002+x003
  其中的x002和x003就是自定變數，MIP原本不認識x002和x003，由你定義了它們。
  另外這show就是既定字，MIP執行show既定的動作，也就是顯示，於是顯示了 2+3
　上數變數x002能寫成x2嗎，不行，MIP會警示變數名太短，為了防錯至少要4個字母。
  上述畫面只顯示2+3 ，MIP會加在一起嗎，會，請使用add
      show==add|x002|x003
  畫面會顯示5 ， 至於add是什麼?在函數那一節說明。
  
  (變數性質一)變數名稱可以是中文，或空格以及各種符號
       例如下面這程式:
           採購單號==
           sqlcmd==select * from pur1m where prno='採購單號'
       用中文變數來寫應用功能，使用者看到的輸入框就直接提示中文，方便。
       
       又例如下面這程式:
         cond2==and iqty=1
         cond3==and iamt=10
         1=1 and==
         //the above is a variable
         show==select * from tb2 where 1=1 cond2 cond3
       螢幕將顯示:
               select * from tb2 where iqty=1 and iamt=10
       擦掉多餘的1=1 ，這稱做'編程返簡'，或稱做'空白也是編程'
       
       
       
       
  
  (變數性質二)變數可以置換其下方文字，變更下方變數的值
       例如下面這程式:
           採購單號==123
           sqlcmd==select * from pur1m where prno='採購單號'
       這裏123將置換sql內的中文

  
  (變數性質三)變數可以變更它自己的值
       例如下面這程式:
                 iqty==1
                 iqty==add|iqty|1              
       當MIP第二次看到iqty，不管iqty以前是1，iqty現在就是2。
       又例如:
                 iqty==0
                 label==op2
                        iqty==add|iqty|1
                        show==iqty,
                 goto==op2      
       這裏讓iqty一再更換其值。這段程式將顯示               
           1, 2, 3, ...98, 99, jump too many times   
       這段程式是無限迴圈，但MIP限制只能迴圈99次，所以MIP停下來。  
       
       MIP語言是描述型語言(script language)，MIP變數就是描述型變數，
       但卻像是巨集型變數去置換其它變數的內容。
  (變數性質四)變數可以含換行符號
       例如下面這程式:
               c001==
                     bb,123
                     cc,456
               d001==ff
       MIP發現 c001 後面沒東西，就往下繼續找，直到下一個==出現，所以形成
               c001 的值變成 bb,123[cr]cc,456 其中[cr]代表一個換行符號
       如果你寫:
               c001==
               d001==ff       
       則c001就是空字串。
       
## 既定字(動詞類)
  既定字就是預先定義好的字，使用時只能出現在等號的左手方。例如
  show==123 這個show就是既定字。既定字是動詞，要執行一個既定動作。
  當既定字遇到變數，就像是動詞遇到受詞，或像是函數遇到參數，促使電腦工作。
  舉例一些既定字如下:
  
  show 用法
         show==123
       這促使電腦顯示等號後面的字，就是顯示123
      
  append 用法
         cAdr==台北市
         append,cAdr==文山區
         append,cAdr==基隆路
         show==cAdr
         這促使電腦顯示 台北市\n文山區\n基隆路
      若不喜歡append自動添加換行符號，則這麼寫:
         append,addEnter==n
         cAdr==台北市
         append,cAdr==文山區
         append,cAdr==基隆路
         show==cAdr      
         這促使電腦顯示 台北市文山區基隆路
      若你曾經聲明append要添加到哪個變數，下次不用再聲明:
         append,addEnter==n
         append,cAdr==台北市
         append     ==文山區
         append     ==基隆路
         show==cAdr   
         這促使電腦顯示 台北市文山區基隆路
          
  saveToFile 用法
     (例):
         cAdr==台北市
         append,cAdr==文山區
         append,cAdr==基隆路
         saveToFile==c:\tmp\abcd.txt , cAdr
       這促使電腦讓c:\tmp\abcd.txt存放cAdr內容，內容是 台北市文山區基隆路      
     (例 換行符號):
         append,addEnter==y
         cAdr==台北市
         append,cAdr==文山區
         append,cAdr==基隆路
         saveToFile==c:\tmp\abcd.txt , cAdr
       這促使電腦讓c:\tmp\abcd.txt存放cAdr內容，內容是 台北市\n文山區\n基隆路
       若要改回文字直接串連，只要寫append,addEnter==n      
     (例 多行內容):      
         mass==
               1234
               5678
         saveToFile==c:\tmp\abcd.txt , mass
     (例 檔名可變):    
         fnpp==t22
         mass==
               1234
               5678
         saveToFile==c:\tmp\fnpp.txt , mass
      
      
  loadFromFile 用法
         loadFromFile==c:\tmp\t22.txt , mass
         show==mass
      這促使電腦去取得等號後面的檔案內容，放進mass這變數。
      
  dosCmd 用法
         dosCmd==
           echo 123 >  c:\tmp\t22.dat
           echo 456 >  c:\tmp\t23.dat
           rem 可以多行dos指令
         loadFromFile==c:\tmp\t23.dat , mass
         show==mass
      
  dosCmd_OneByOne 用法
         dosCmd_OnebyOne==
           echo 123 >  c:\tmp\t22.dat
           echo 456 >  c:\tmp\t23.dat
           rem 可以多行dos指令
         loadFromFile==c:\tmp\t23.dat , mass
         show==mass
      若第一行出錯，dos餘下指令不做，並把錯誤訊息寫到c:\MIP\webc\99.err
      若第二行出錯，dos餘下指令不做，並把錯誤訊息寫到c:\MIP\webc\99.err
      其中99.err是臨時編號，要查錯只要找最新的*.err
      這個功能是要修改DOS整批執行辦法，它的原始辦法是無論對錯往下做。
  
  conndb 用法，連接資料庫
         conndb==db1234
         sqlcmd==select * from mapper
      其中db1234要預先定義在 c:\MIP\webc\cdblist.mip裏         
      又若HOME已經預先定義在 c:\MIP\webc\cdblist.mip裏，則直接寫:
         sqlcmd==select * from mapper
      不用聲明conndb==HOME

  sqlcmd 用法， 送出SQL指令給資料庫引擎
      (例: 最簡單用法)
         sqlcmd==
            select * into #p from mapper
            select hi='hello', * from #p
      內容可以含多句SQL指令

      (例: 讓SQL輸入來源是矩陣)
         mass==
         11,12
         21,22
         31,32
         sqlcmd,mass==select a='c:fdv01', b=fdv02*100
      這裏在sqlcmd後面逗點接來源，SQL將歷遍這來源，來源一行做一次，
      每次SQL送出前，將fdv01置換為當前這一行的第一個元素，
      每次SQL送出前，將fdv02置換為當前這一行的第二個元素，...
      結果顯示
      c:11 ,1200
      c:21 ,2200
      c:31 ,2300
      
      (例: 讓SQL輸入來源是檔案) 例如把t22.txt當成SQL的輸入源:
          sqlcmd,t22.txt==select a='a-fdv01'          將顯示:
                 a-c:11
                 a-c:21
                 a-c:31
          這裏t22.txt從下例產生

      (例: 讓SQL輸出結果到檔案)
         mass==
         11,12
         21,22
         31,32
         sqlcmd,mass,t22.txt==select a='c:fdv01', b=fdv02*100
      在sqlcmd後面逗點接來源，SQL將對這來源的每一行跑一次，
      每次SQL送出前，並將fdv01置換為當前這一行的第一個元素，
      每次SQL送出前，並將fdv02置換為當前這一行的第二個元素，...
      最後將結果寫到檔案t22.txt 於是得到
         c:11#!1200
         c:21#!2200
         c:31#!3200   其中#!是資料分隔符號
          
      (例: 讓SQL輸出結果到檔案 指定資料分隔符)
      用;當分隔符號: sqlcmd,mass,t22.txt,;==select a='c:fdv01', b=fdv02*100
      用,當分隔符號: sqlcmd,mass,t22.txt,,==select a='c:fdv01', b=fdv02*100

          
      (sqlcmd用法總結) sqlcmd,fromX,toY,DIP==some SQL lines
      其中fromX預設值 matrix
      其中toY  預設值 screen
      其中DIP  預設值 #!
      
      (sqlcmd應用場景) 由上述我們能把SQL結果存到檔案裏，再連接另一個資料庫，把結果稍做花樣存進去，於是可以跨資料庫轉移。
      
## 既定字(區塊類)
   ifa 用法
           ifa==ifeq|1|1|then
             show==eq
             show==123
           else==
             show==neq
             show==456
           endif==
       這ifa就是一般程式的if，為了和一般程式的if區隔，所以用ifa，
       因MIP語句常用來操控組合一般程式的文字模板，為避免混淆，所以換字區隔之。

   most 用法
           most==
             show==eq
             show==123
           but==ifeq|1|2|then
             show==neq
             show==456
           endmost==
        這most是說大部份情況進去show==eq，但偶爾有符合but情況時，做but。
        這是為了適合長程式的閱讀。想像某一段code平常都跑得好好的，
        但偶遇某情況要特別處理。按一般程式做法，我們會寫
           if 有特別情況 then
              做特別的事
           else
              做主要的事
           endif
        這樣的語法使得小判斷擋在主要的事之前，干擾閱讀流暢，應改為主要事情在前:
           if 沒有特別情況 then
              做主要的事
           else
              做特別的事
           endif
        沒有特別情況 這幾個字仍覺干擾，於是下移之:
           generally
              做主要的事
           but if 有特別情況 then
              做特別的事
           endif
        為了與if-endif區分，用語改為most-endmost
        
   for 用法
           for==i|1|10|2
              show==i-
           next==
       將顯示1-3-5-7-9-
              
   foreach 用法
           foreach==i|1,3,5,7,9
              show==i-
           next==
       將顯示1-3-5-7-9-
       再舉一例:
           list3==5,7,9
           foreach==i|1,3,list
              show==i-
           next==
       將顯示1-3-5-7-9-
       有人說9的後面還有一個減號，不喜歡。 可以改用向量語法
           show==gu1v|1,3,5,7,9|[vi]|-
       將顯示1-3-5-7-9   ， 後面章節再說明向量語法。
       
   gosub 基本用法
       這gosub是跳去某一段副程式，類似goto，但gosub是跳去又跳回，例:
               show==1, ;; gosub==work2 ;; show==3, ;; exit==ok
               label==work2
               show==2,
               return==end work2
       將顯示 1,2,3,ok
       這裏最後寫return==某某結束 ，程式就跳回去。
       
       若是最後寫return==空字串，則程式不跳回去，繼續往下走，例如:       
               show==1, ;; gosub==work2 ;; show==3, ;; exit==ok
               label==work2
               show==2,
               return==ifeq|1|2|back
               show==21,
               return==end work2       
        第一個return 遇到 ifeq|1|2|back 是函數，傳回值是空字串，繼續往下走
        第二個return 遇到 end work2 ，它不是空字串，程式就跳回主程式。
       
       
   gosub 預傳變數當參數
       變數必須預先準備好，gosub右方不能帶參數，例如:  
       var1==1
       var2==2
       show==var3,        //將顯示五個字 var3,
       gosub==work2       //將顯示一串字 c(1)=d(2),
       show==var3,        //將顯示四個字 333,
       exit==done
       
       label==work2
         show==c(var1)=d(var2),  //這var1是全程變數，源於主程式，此處能見。
         var3==333               //這var3是全程變數，到主程式裏還是看得到。
       return==end work2
         
   gosub 收回結果
       讓gosub跳去某處，最後會收回一個結果值，可以繼續使用，例如:
           var2==gosub|work2 //把gosub當做呼叫函數的動詞
           show==var2
           exit==ok
           label==work2
           return==2,
       將顯示 2,ok

       
       
         
       
   
   top1r 函數用法 ???
   
       
       
         
        
                          
         
      
      
     
      
      
            
       
           

      
      
      
  
  
  
  generally==notif...|1|2|then ;; part1;; else;; part2;; endif 等效於
  if       ==   if...|1|2|then ;; part2;; else;; part1;; endif 舉例如下
  
                most==
                show==genernal case
                but==ifeq|1|2|then
                show==few case
                endmost==
  
  
## 函數
  函數會執行預先定義好的動作，函數很多，請看函數全集。舉例加法 add
      show==add| 1 | 2  
  畫面會顯示3。 
  為了程式師寫作方便，函數不分大小寫，函數的參數用直線號隔開。
  
  又例如eval是任意加減乘除 :
      show==eval | 1+2*3
  畫面會顯示7。   
  
  又例如ifeq是比較相等與否的函數 :
      x002==2 
      show==ifeq|x002|2|yes2 |not2  
  畫面會顯示yes2。
  
  又例如ifeq搭配goto :
      x002==2 
      goto==ifeq|x002|2|yes2 |not2  
  這樣程式會跳到標號yes2的那一行繼續往下跑。
  
  函數也可以夾雜在字裏行間使用，例如:
      show== Hi, I was happy in recent @[eval|2*3+1]# days 
  畫面將顯示 Hi, I was happy in recent 7 days    
  也就是整個函數可以用 @[...]# 括住。 
  @[...]#口語上怎麼唸呢? @看起來像ca，所以@[...]# 唸作call，或簡稱為@函數。
  記得 @和[ 要緊連在一起，而 [...]內各參數則可鬆散，其前後空白將被忽略。
  
  除了既定函數，變數也可以當成自定函數，但自定函數只能作文字變換，例如:
      myFunc==I like someOne
      show==@[myFunc|like=love|someOne=Mary]#
  畫面會顯示            I love Mary 
  既定函數不區分大小寫，自定函數或是變數有區分大小寫。
  自定函數的參數用法是 舊字=新字將取代之 ， 各參數用直線號隔開。
  
  函數和參數是以平等的身份居住在[...]裏，所以可以讓函數名稱居住在第二格。
    show==result is 2@[ abc  | inside|abcde | in | not in ]# , ok ?
  這句話等效於:
    show==result is  @[inside| abc   |abcde | in | not in ]# , ok ?
  於是電腦解開inside函數，得到
    show==result is in , ok ?
    
  又例如
    x002==3
    show==answ is 2@[x002     |ifbetween| 1:4| ok | not ok]# , so ?
  這句話等效於:
    x002==3
    show==answ is  @[ifbetween|x002     | 1:4| ok | not ok]# , so ?
  這句話等效於:
    show==answ is  @[ifbetween|3        | 1:4| ok | not ok]# , so ?
  於是電腦解開ifbetween函數，得到 
    show==result is ok , so ?
  
## 程式跑前預解
    (1)凡是跑起程式，先檢查有沒有提到include==*** ，有則載入成為程式的一部分。
    (2)凡是看到某一行有//則忽略其右方
        a001==1 //;;b002==2 等效於a001==1 
        //a001==12;;b002==2 等效於則整行忽略。但是若這一行有:// 則整行都收。
     
    (3)凡是看到;;連續兩個分號，則改為換行符號。但若這一行有'uvar'則不要改。   
    (3)凡是看到某行有'ifa=='  ，下面又有一行'endifa==' ， 則MIP知道這是ifa區塊。
## 一行程式的運作: 洗染、解函、解罩
  (一行程式內部動作1)洗染:
     MIP辨識每一行成為key=value型態，已記住的(key,value)將對下方文字置換，例如
         a001==1
         ccb1==2
         show==hi ccba001y ready 
     當程式焦點來到第二行，a001企圖置換它，但沒有符合的字。
     當程式焦點來到第三行，a001企圖置換它，於是第三行變成
         show==hi ccb1y ready
     當程式焦點在於第三行，ccb1也企圖置換，於是第三行變成
         show==hi 2y ready
     於是顯示
               hi 2y ready
     程式往下跑，文字被上方文字置換，文字置換簡稱為洗染。

     
  (一行程式內部動作2)解函:                      
     洗染後，若字面上有函數將會被解開，
     舉例一:
            say2==said
            kkkk==ifeq|1|1| say2 y |say n   
         這kkkk等號右方是一個函數，於是解開函數，成為
            kkkk==said y
     舉例二: 
            say2==said     
            kkkk==hello @[ifeq|1|1| say2 y |say2 n]#,cc 
         這@函數夾雜於字裏行間，於是@函數被解開，成為
            kkkk==hello said y, cc
     舉例三:
         若遇@函數內層還有@函數，應該先解開內層:
            aa02==1
            kk02==see @[ifeq| 2 |  @[add|aa02|1]# | two | unknown]# so what
         則變化為
            kk02==see @[ifeq| 2 |  2              | two | unknown]# so what
         再變化為
            kk02==see two so what
    
     有時候當外層是gu**函數時，內層函數卻是延後解開，就是gu**函數先解，內層@函數後解。
     舉例四:
            aaaa==1
            show==gu1v|4,5,6  |  @[add|aaaa|[vi]]#  |  +
         它被洗染變成
            show==gu1v|4,5,6  |  @[add|1   |[vi]]#  |  +
         由於gu開頭的函數被設計成優先於內層，所以先解gu
            show==@[add|1|4]# + @[add|1|5]# + @[add|1|6]# 
         再後解@函數
            show==5 + 6 + 7
         於是顯示
                5 + 6 + 7  
     為甚麼有時候內層函數要後解? 
     就像一顆糖球外殼先溶解，裏面的小球再溶解，瞬間在舌尖釋放出繽紛的味道。
     只有後解開才能釋放出繽紛的程式碼，大量減低你的碼字寫作。
     給它取個英文名吧: call-inside-function-after-vector-solved 
                 
  (一行程式內部動作3)解罩
     當某個字不想被洗染，程式師可以故意把[]擠在這個字裏，例如:     
        aaaa==2
        show==I say a[]aaa=aaaa
     畫面應顯示 
        I say a[]aaa=2
     這個[]是一個既定字，我們可以把它唸作'遮罩'其用途是防止洗染。
     凡是當左方既定字要接收右方值之前，MIP自動把[]去掉，稱為'解罩'。
     在這例中，當show要接收右方值之前，MIP自動把[]去掉，所以實際顯示為:
        I say aaaa=2
     
     什麼樣的字在進入左方之前會被'解罩'呢，這樣的字只有幾個:
     []      換成 無
     $space  換成 一個空白格
     $enter  換成 一個換行符號 ( ascii_10+ ascii_13 )
     $and    換成 一個空白格and一個空白格
     $fncall 換成 @
     $fnpipe 換成 |
     
     
  (一行程式內部動作,總結) MIP處理一行程式的動作順序是:
     凡是遇到 kkkk==vvvv 這樣的句子，前面認識的既定字依序灌進去洗染右方，
     洗染後裏面也許有函數，那就解函。
     解函後裏面也許有遮罩，那就解罩。
     處理後的值傳給左方kkkk，若kkkk是一個既定字，那就做既定的事，
     然後再跑下一行，程式就這麼一行一行運作。
                 
## 程式跳躍 goto, gosub
  程式運作是一行一行依序往下，但可以跳躍。最基本的跳躍就是goto ，
  還有 if ... then ... else ... endif
  還有 for ... next
  還有 forEach ... next
  還有 gosub label ... label ... return
  
  (跳躍1)goto 舉例:
                iiii==2
                goto==ifeq| iiii| 2| work2
                show==say1
                exit==...
                
                label==work2
                show==say2
         這例子會顯示 say2 。 goto可以向下方的label跳也可以向上跳。
         
  (跳躍2)ifa 開始一個 '如果' 區塊， 舉例:
                 iiii==2
                 ifa==ifeq|iiii|2|then
                     show==say2
                 else==
                     show==say1
                 endifa==
         這例子會顯示 say2 
         ifa那一行一定要呼叫if*** ，一定要呼叫某個二擇一函數，
         函數的參數寫上條件事項，條件後面做什麼事不要寫，只寫then換行。
         換行才開始寫if成功做什麼事，if不成功做什麼事。     
         
  (跳躍3)for 舉例:
                 for==i002 | 1 | 9 |2
                     show==sayi002,
                 next==
         這例子會顯示 say1,say3,say5,say7,say9
                        
  (跳躍4)foreach 舉例:
                 foreach==i002|9,11,88
                     show==sayi002,
                 next==
         這例子會顯示 say9,say11,say88
                 
  (跳躍5)gosub 舉例:
           a002==1
           gosub==ifeq|a002|1|work1|work2
           a002==add|a002|1
           gosub==ifeq|a002|1|work1|work2
           a002==add|a002|2
           gosub==work1
           show==done,
           exit==..

           label==work1
           show==do work1(a002),
           return==

           label==work2
           show==do work2,
           return==

          按[確定]後 將顯示 do work1(1), do work2, do work1(4), done, ..  
          
          gosub也可以當函數使用，跳去副程式取值回來，例如:
               answ==1            ;; show==answ              
               answ==gosub|proc2  ;; show==answ  
               exit==ok              
               
               label==proc2
               show==into proc2
               return==2
               return==end proc2
               
          
           
  
  


##預先定義好的既定字 全集 unfinish   
   預先定義好的既定字會促使電腦做事
   (*) sqlcmd ，將發送一段SQL給資料庫引擎，這一段SQL可以含有多個句子。
    發送前會先把okclick改成onclick
    sqlcmd==
	    some_SQL1;
		some_SQL2;
		some_SQL3;
		
	(*) saveToFile ，將多行文字存到檔案fcc.txt裏
    saveToFile,fcc.txt==
        this is fcc line1
        this is fcc line2
        
	(*) addString ，將多次收集文字以方便最後存到檔案裏
    addString,paragraph99_txt ==123
    addString,paragraph99_txt ==456
    saveToFile,paragraph99.txt==paragraph99_txt  
                   
## 函數 全集 
  MIP有區分大小寫的，自定函數有區分大小寫，但這樣有些僵硬，
  所以讓函數的名稱可以任意大小寫，驚嘆號前後的空白都不計。
  下面列出預先定義好的函數。
 
 二者擇一的一些函數:
   ifEq           若等於           例: ifEq          |2  |2    |is2|not2   
   ifNe           若不等於         例: ifNe          |1  |2    |ne |eq
   ifGt           若大於           例: ifGt          |1  |2    |no |yes
   ifGe           若大於等於       例: ifGe          |1  |2    |no |yes
   ifLt           若小於           例: ifLt          |1  |2    |yes|no       
   ifLe           若大於等於       例: ifLe          |1  |2    |yes|no   
   ifUUEq         若小寫後相等     例: ifUUEq        |HH |hh   |yes|no
   ifLenEq        若字的長度相等   例: ifLenEq       |ab |cd   |yes|no
   ifIn           若內在於         例: ifIn          |bc |abcd |yes|no
   ifNum          若為數字         例: ifNum         |1.2      |yes|no
   ifPosi         若為正數         例: ifPosi        |123      |yes|no
   ifBetween      若介於某某之間   例: ifBetween     |xy |aa:dd|yes|no
   ifv            若有值           例: ifv           |aaa      |yes|no                                  
                  再舉例:
                        inputx123==456
                        condition==ifv|inputx123|and iqty=inputx123
                        show     ==where 1=1 condition    將顯示:
                                   where 1=1 and iqty=456
   ifValidDate    若是西元yyyymmdd 例: ifValidDate   |20040102 |yes|no
   ifValidDateROC 若是民國 yyymmdd 例: ifValidDateROC|  930102 |yes|no
   
 日期函數:   
   dateConv
   dateConvROC
   dateAdd
   dateAddROC
   dateDiff
 算術函數:
   add            加法             例: add|2|3 或 add|2|-3
   eval           各種加減乘除     例: eval| (2*3+1)*2+1
   ifeqs          多情況給值若x則y 例: ifeqs|x999| x2|y2|  x3|y3|  x4|y4

 *f 常用於串接SQL句子的函數: 
 *f ifV      ,seeV       若有值          
       又例如:         
            inputx123==
            condition==ifv|inputx123|and xqty=inputx123
            show     ==where 1=1 condition    將顯示:
                       where 1=1              也就是跳過此條件
            也可以緊湊寫成一句:   
            show==where 1=1 @[ifv| inputx123| and xqty=inputx123]#
                      
           
 *f andRange  製造一段SQL的查詢條件   
    例:input12==2004/01/02:2004/03/02
       condition2==andRange|kdate|input12
       show      ==where 1=1 condition2        將顯示:
                   where 1=1 and( kdate between '2004/01/2' and '2004/03/02')
    又例如:         
       inputsR1R2==
       condition2==andRange|kdate|inputsR1R2
       show      ==where 1=1 condition2       將顯示:
                  where 1=1         
      方便於當使用者不填條件時，讓SQL也不提到這條件
    又例如:         
       inputsR1R2==2004/01/2
       condition2==andRange|kdate|inputsR1R2
       show      ==where 1=1 condition2       將顯示:
                   where 1=1 and( kdate like '2004/01/2%' )
       這裏採用相似比對而不是等於。
      
 *f 有關日期的一些函數:
                  
 *f ifValidDateROC 查輸入日期合理否 例: show==dateVerify|991301    將顯示錯誤  
                   又且 若年份在00到150之間為合理，        在此之外則顯示錯誤 
 *f ifValidDateUSA 查輸入日期合理否 例: show==ifValidDate|20041301 將顯示錯誤  
                   又且  若年份在1900到2040間為合理，      在此之外則顯示錯誤 
 *f ifValidDate    同ifValidDateUSA
 
 
 *f dateConvROC    把各種日期表示法轉成你要的格式，輸出年份為民國，例如:
                   show==dateConvROC|Jan 22, 1999|yyyy/mm/dd 將顯示  88/01/22
 *f dateConvUSA    把各種日期表示法轉成你要的格式，輸出年份為西元，例如:
                   show==dateConvUSA|Jan 22, 1999|yyyy/mm/dd 將顯示1999/01/22
 *f dateConv       同dateConvUSA

 
 *f dateAddROC     某西元日期或民國日期，加個幾天，輸出民國日期，例如:
                   show==dateAddROC|19270101|3|yyyymmdd
 *f dateAddUSA     某西元日期或民國日期，加個幾天，輸出西元日期                   
 *f dateAdd        同dateAddUSA
 
 
 *f dateDiff       某西元日期或民國日期，二者相距幾天   例如: 
                   show==dateDiff| 20041130| 20041202  將顯示2               
                   show==dateDiff| 20041130|   931202  將顯示2               
            

 
 *f 以下是字串函數:                  
 *f inner          取界內的值       例: show   ==inner|I Love Mary|I|M 將顯示 Love
 *f mobileTel      電話號碼前面補0  例: show   ==mobileTEL|988112233   將顯示 0988112233
                   
 *f cookieW        對某cookie寫值   例: jobDone==cookieW|cook22   |v22
 *f cookieR        對某cookie拿值   例: cook22V==cookieR|cook22   


      
		  
                         
##查詢資料庫資料

##新增多筆資料

##新增一筆資料

##刪除一筆資料

##修改一筆資料

##增刪修查一起工作

##顯示資料直轉橫(顯示樞紐報表)

##多維度靈活查詢

  
## 編輯'功能清單'
  本軟體把一個公司需要的眾多功能顯示在一頁畫面上，讓使用者點選。
  要編輯功能清單就打開c:\MIP\webc\cSPlist.mip，看到如下內容:
    [td]  
    [tf]功能段代號A, 功能段名稱A
        程式檔名1,   程式名稱1  
        程式檔名2,   程式名稱2  
    [tf]功能段代號B, 功能段名稱B
        程式檔名3,   程式名稱3  
        程式檔名4,   程式名稱4 
  以[td]開頭的這一行使功能清單向右換欄，以免清單往下太長。
  以[tf]開頭的這一行代表其下方一小段是一個功能段，
  將來在cusList.txt裏可以指定某人可以操作幾個功能段。
 
## 編輯'使用者清單'
  本軟體可以管理使用者權限，
  打開c:\MIP\webc\cUSlist.mip
  每一行的欄位依序是姓名、帳號、密碼、 公司名稱、 部門名稱、 員工工號、 可允許使用的功能段
  本軟體可以允許多個公司多個部門的人員一起使用 所以要寫下 公司名稱 部門名稱 員工工號 
  若只允許某人僅能使用某3個功能段 則在 "可允許使用的功能段" 那欄寫上3個功能段名稱，例如 aa bb cc，
  若要允許某人可以使用全部功能段  則在 "可允許使用的功能段" 那欄寫上all

## 編輯'資料庫清單'
  MIP的基本運作不需資料庫，若你讓它連接到多個資料庫，它就如虎添翼。
  連接方式如下，打開 c:\MIP\webc\cDBlist.mip 看到如下內容
     HOME      : ms    : some connection string1
     db123     : ms    : some connection string2
     db456     : ms    : some connection string3
  第一行宣告一個預設的資料庫，將來寫程式沒說連接哪個資料庫，就是連接這一個       
  第二行宣告一個稱謂db123，以後只要說連接db123， MIP就去連接這資料庫
  接著在MIP工程畫面輸入一些字，舉例:
      conndb==db123
      sqlcmd==select * from tb2
  就可看到資料表 tb2 了
  
## 庫存撿貨系統
  想像你要建造一個庫存撿貨系統，軟體工程第一步收集需求。需求是:
  (1)倉庫要有儲位，入庫時隨意放置，出庫時要顯示儲位引導人員撿貨。
  (2)要能顯示存放最久的那些商品，進倉庫商品的平均存放時間是多久?
  
  軟體工程第二步 設計能顯示上述資料的記錄簿，也就是資料表格。
  既然要看商品的進出時間，何不讓記錄的每一行就是記載著商品的入庫到出庫過程?
  當入庫3顆蘋果，每顆出庫時間都不同，何不讓每一行就記載著單一顆商品的過程?
  於是表格命名為 oplife 欄位如下:
  每行流水號, flow int(1,1)    資料庫引擎會自動填入值，由1起，每行加1
  入庫批號,   inno varchar(16) 
  入庫日期,   indt varchar(16)
  商品代號,   skno varchar(16)
  放置儲位,   ceno varchar(16)
  出庫批號,   ouno varchar(16)
  出庫日期,   oudt varchar(16)   
  
  軟體工程第三步 列出各個場景，其中之一是入庫
  有3顆蘋果5顆橘子要入庫，隨貨附有商品清單，清單上有採買編號。
  人員帶著商品站到儲位A2，放上3顆蘋果，在貨單上蘋果那一行註記A2,3
  人員帶著商品站到儲位B2，放上3顆橘子，在貨單上橘子那一行註記B2,3
  人員帶著商品站到儲位C2，放上2顆橘子，在貨單上橘子那一行註記C2,2
  人員回到辦公桌，要把註記輸入電腦。
   
  軟體工程第四步 寫這個入庫功能，編輯文字檔in02.mip，內容如下
      採買編號==
      以下填入商品,儲位,數量(填入前先把下框文字清掉) 
      入庫明細==
      蘋果,??,??
      橘子,??,??
      #1#2
      opdt==dateadd||0
      sqlcmd==
           select inno,indt,skno,ceno, iqty=0 into #p from oplife where 1=2
      sqlcmd,入庫明細==
           insert into #p ('採買編號', 'opdt', 'fdv01','fdv02','fdv03')
      sqlcmd==          
           begin2:
             insert into oplife (inno,indt,skno,ceno) from #p where iqty>0
             update #p set iqty=iqty-1; delete #p where iqty<=0
           if exists (select * from #p) goto begin2
      show==入庫記錄完成
  編輯文字檔完成，存起來。
   
  再列出另一個場景，是撿貨準備出庫
  有2顆蘋果2顆橘子要撿貨準備出庫，出庫單編號Q33已印成紙，紙上有商品明細。
  希望讓電腦顯示商品位置以方便人員撿貨。於是編輯文字檔in02.mip，內容如下
      撿貨前請填入商品,數量。電腦會告訴你儲位
      填入前請先把下框文字清掉
      出庫明細==
      蘋果,??
      橘子,??  
      #1#2
      sqlcmd,出庫明細==
      --最早入庫的 優先出庫 所以下一行寫order by flow
      select top ftv02 skno,ceno from oplife where skno='fdv01' order by flow
      show==應撿貨儲位如上
  編輯文字檔完成，存起來。         
  
   
  再列出另一個場景，是出庫完成後的登載。於是編輯文字檔ou02.mip，內容如下
      出庫編號==
      以下填入商品,儲位,數量(填入前先把下框文字清掉) 
      出庫明細==
      蘋果,??,??
      橘子,??,??
      #1#2
      opdt==dateadd||0      
      sqlcmd==
        select inno,indt,skno,ceno, iqty=0 into #q from oplife where 1=2
      sqlcmd,入庫明細==
        insert into #p ('採買編號', 'opdt', 'fdv01','fdv02','fdv03')
      sqlcmd==          
        begin2:
          declare @flow as int,   @skno as varchar(16)
          select @flow=min(flow), @skno=min(skno) from oplife where
            skno=(select top 1 skno from #q where iqty>0) and ouno is null
          update oplife set ouno='出庫編號', oudt='opdt' where flow=@flow
          update #q set iqty=iqty-1 where skno=@skno
          delete #q where iqty<=0
        if exists (select * from #q) goto begin2
      show==出庫記錄完成
  編輯文字檔完成，存起來。
  
   
  再另一個功能，希望顯示商品平均放在倉庫多久。於是編輯文字檔LF01.mip，內容如下
      #1#2
      sqlcmd==
       select 平均庫齡=convert(
                               varchar, avg(  datediff(d,indt,getdate())  ) 
                              )+'天'    from oplife where oudt is null
  編輯文字檔完成，存起來。
       
       
      
  
  
  
  
  
  
 

## 跨資料庫傳輸: 把文字檔轉入DB
            dataFrom
            dataTo
            dataToTable

## 跨資料庫傳輸: 經記憶體傳輸資料
## 跨資料庫傳輸: 經檔案多批次傳輸資料

## 呼叫外界: 發信
## 呼叫外界: 發簡訊
## 呼叫外界: URL get, post
## 呼叫外界: ftp
## 呼叫外界: 呼叫window command 或呼叫exe

## 被外界呼叫: URL get,post
## 被外界呼叫: 被VB, 被排程器

## 巨集編程的優點: 編程可以分層次
   有一個程式 它慢慢長大，長大成一隻恐龍，你無法想像它原始模樣或中間模樣。
   有一個程式，大約3個步驟結束，原本程式很短。
   後來你覺得在某某情形下，應執行另外3個步驟，於是程式變長了。
   後來又想記錄程式過程，進入每一步驟時寫檔記開始，離開記結束，程式更長。
   若以巨集寫作，凡是添加的句子都命名為一段巨集，那麼當你暫時把巨集清空，
   就可以顯出原始模樣，當你把巨集充滿，就顯示最後模樣。
   
   這比文字編輯器採用文字折疊法更清楚，例如為了記錄過程而添加程式，
   這記錄機制本身又分三段，開檔、多次寫檔、關檔。過多的文字造成干擾，
   你折疊文字還是留個字頭干擾視覺。
   
   若某程式用巨集一層一層的添加複雜度，一共四層，則你可以只寫前兩個層次，
   暫時清空後面兩個層次，就可以顯示程式組合到一半的模樣。
   
## 矩陣式編程的優點: 程式可以對比
   例如有兩個程式，
   A程式為aa;         bb;               cc; dd;             ff
   B程式為aa; forEach;bb;if item=1 then cc; dd;endEach; ee; ff
   其中aa,bb,cc,dd,ee,ff 都是幾十行程式。當你鋪陳開來就造成視覺困擾。
   若把aa,bb,cc,dd,ee,ff 都寫成副程式更麻煩，因為有很多參數要傳遞。
   若把程式改用矩陣式表達法，卻很簡單:
       matrix==
          aa  , aa
              , forEach
          bb  , bb
          cc  , 
              , if item=1 then cc
          dd  , dd
              , endEach
              , ee
          ff  , ff
       programA==gu1m|matrix|[mi1]|$enter
       programB==gu1m|matrix|[mi2]|$enter
   這樣是不是很清楚呢
   
   也可以改成這麼寫:
       matrix==
          AB, aa
          .B, forEach
          AB, bb
          A., cc
          .B, if item=1 then cc
          AB, dd
          .B, endEach
          .B, ee
          AB, ff
       programA==gu1m|matrix|[mi2]|$enter|1A
       programB==gu1m|matrix|[mi2]|$enter|1B
   在matrix中第一個欄位中有A，就是A程式會用到，
   在matrix中第一個欄位中有B，就是B程式會用到，
   這樣是不是更清楚又簡短呢
   
   
## 怎樣減少軟體編程的時間
  要減少編程的時間，其方法都是把軟體寫作由申論題降為填充題，再降為選擇題。
  先由資深人員定骨架，骨架間留有空格，再由資淺人員把材料填進空格裏。
  但世界沒這麼美好，某套骨架只能適用於某些場景，換場景要換別套。
  
  有人批評程序導向的作法，到處宣傳物件導向的作法，也就是變數應盡量封裝。
  但若編程到處都強迫封裝，多出很多封裝紙，封裝之間傳訊息就太難寫了。
  所以變數全部封裝或和變數全部裸露，工程師要有智慧判斷。

  有人提出軟體應分解為前端後端，前後之間由各種訊號、指位詞等串接。
  這些串接的訊號有時候也複雜到變成很大的程式，若程式總長度反而升高，
  那就是串接段已零碎散落程式各處，不如前後端合併更節省編程時間。
  

## 輸入畫面集解  
  輸入框基本型:
        名字== 
        #1#2    
        show==hello 名字
            使用者看到的畫面就是 名字 冒號 一個輸入框 
            使用者填寫Mary
            使用者看到hello Mary
  輸入框後加字:
        名字==  $, 請寫人名
        #1#2    
        show==hello 名字
            使用者看到的畫面就是  名字 冒號 一個輸入框 請寫人名
            使用者填寫Mary
            使用者看到hello Mary
  輸入框拉長:
        名字==  $, 請寫人名 $, iibx~50
        #1#2    
        show==hello name2 
            使用者看到的畫面就是  名字 冒號 一個輸入框 請寫人名
            輸入框的長度變長了，可以容納50個字以上

  框右之框:
        x001==1 $,請寫數字 $, iibx
        x002==2 $,請寫數字 $, iib2
        #1#2
        show==(x001,x002)
               則使用者看到一個輸入框x001， 在其右方還有一個輸入框x002

  框右之框:
        x001==1 $,請寫數字 $, iibx
        x002==2 $,請寫數字 $, iib2
        x003==3 $,請寫數字 $, iib2
        #1#2
        show==(x001,x002,x003)
               則使用者看到一框x001， 右方還有一框x002， 右方還有一框x003
               這樣設計當然是為了佔滿螢幕，一框佔螢幕一行很浪費          
  
  多行輸入框:
        name2==John $, 請寫人名 $, mmbx~20x80
        #1#2    
        show==hello name2 
            畫面就是一個大型輸入框，框往下20行 往右80格，框右有字 請寫人名
   
  下拉選擇框:
        name2== $, 請寫人名 $, comb~John$s1,Tony$s2,Jack$s3
        #1#2    
        show==hello name2 
            畫面就是一個下拉選擇框。選一個人名，按確定後
            畫面顯示  hello s1  (或是 hello s2 如果你選了Tony)
     
  勾選框:
        answ==    $, yes or no  $, checkbox
        #1#2    
        show==hello answ 
            則使用者看到的畫面就是一個勾選框。
            不勾按確定 則顯示N
            勾了按確定 則顯示Y
  上傳框:
        請選一檔案== $, $, file
        你好嗎    ==
        #1#2
        show==你好嗎  
            則使用者除了看到你好嗎，還會把檔案傳到主機的這資料夾 c:\MIP\webc\
               
  無框 純粹一行說明字:
        name2==
        give a boy name
        #1#2    
        show==hello name2 
            輸入框下方有一行字: give a boy name
   
  無框 純粹一行說明字的第二種寫法，用comment開頭來命名變數
        name2==John $, 請寫人名 $, mmbx~20x80
        comment2==write something
        #1#2    
        show==hello name2 
            畫面就是一個輸入框，下方有字 write something
   
  無框 純粹一行說明字的第三種寫法，用comment暗示
        name2==John $, 請寫人名 $, mmbx~20x80
        anything==write something $, $, comment
        #1#2    
        show==hello name2 
            畫面就是一個輸入框，下方有字write something
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框，長度20
       a002==hello
	   
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框，長度20，框右方有提示文字 say anything
       a002==hello $, say anything 
	   
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框，長度30，框之右方有提示文字 say anything 
       a002==hello $, say anything $, 30
	   
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框  框之右方有提示文字 say anything 而框的長度拉長為30
       a002       ==hello    $,  say anything $, iibx~30
	   key        ==value    $,  explainWord  $, typeWord   ( typeWord could be   "epwd"    "iibx"    "iib2"    "entr"    "hidn"    "mmbx"    "comb"   "ckbx"  )
	   ikey(cmNxy)  ival(cmNxy)    imrk(cmNxy)     ptyps(cmNxy) 
	   
## 安裝問題集解  
  (問)找不到這電腦上的IIS管理員
  (解)    若有看到[伺服器管理員]這圖示，點它，進去看到角色，
          角色下有網頁伺服器， 對它按右鍵新增角色服務，就可顯示IIS
    
  (問)輸入網址 MIP/MIP.aspx 看不到登入畫面， 卻看到 HTTP錯誤404.17  
  (解)    應檢查ASP.NET有沒有安裝，也就是:
          開始> 控制面板> 程序和功能> 打開或關閉Windows功能> 
          Internet信息服務> 網際網路服務> 應用程序開發功能> ASP.NET
          把這個勾起來
    
  (問)當webc目錄被設定共用後，IIS卻說虛擬目錄不存在，說沒有web.config
  (解)    不須添加web.config ，只要進iis-manager 按右鍵> 管理虛擬目錄> 
          進階設定> 實體路徑認證， 打入有存取權限的帳號密碼即可
          順便的，IIS寫檔案不成功的問題也解了
    
  (問)畫面說程式有錯，但不能顯示明確原因
  (解)    在github檔案區還有一個小檔案web.config，複製到c:\MIP\webc即可。
    
  (問)畫面說 c:\mip\webc 不能寫檔
  (解)    進iis-manager 按右鍵> 管理虛擬目錄> 進階設定> 實體路徑認證， 打入有存取權限的帳號密碼
          或是用檔案總管

    
  (問)資料庫設定檔會被使用者看到，想隱蔽它
  (解)    在c:\MIP\webc之旁另開資料夾 c:\MIP\webd, c:\MIP\webt, c:\MIP\webq
          把c:\MIP\webc\*.mip移動到這 c:\MIP\webd
          編輯c:\MIP\webc\mip.aspx大約第80行位置:
          請把 codFord=CCFD & "webc\" :tmpFord=CCFD & "webc\" :queFord=CCFD & "webc\" 
          改成 codFord=CCFD & "webd\" :tmpFord=CCFD & "webt\" :queFord=CCFD & "webq\"
          這樣使用者就看不到了。
          