### 這是什麼
  這是一個軟體，運行一個程式語言MIP(macro interactive processing)， 
  並自帶編輯界面，用來快速生產商用程式，所以本軟體稱為MIP builder。 
  它認識幾十個既定動詞，所以它能操控電腦主機， 
  也認得模板(巨集、宏、macro)，所以它能組合模板變成其他語言去操控主機。

  它是一個script解譯器，能立即產出前景互動網頁，也能在背景連接資料庫；
  也是一個macro 組合器，能組合模板輸出文字，不論程式執行前或執行中；
  它是一個語言，是一個工具，用來縮短程式碼，提升資訊人員的生產力。
  
### 適用場合  
  在多年前，我看到某資訊人員每天都在下SQL指令，來應付user的各種需求，
  他說user的需求變來變去很難寫成程式，要是有一個網頁型的SQL輸入框，
  讓他任意調整參數，調到滿意存起來就自動成為user的功能，這樣才好過日子。
  於是我作了一個生產程式的母機，這就是MIP的前身，用在製作並管理幾個應用系統。
  本文將舉一個MIP應用範例: 庫存撿貨系統。

  這幾年來，資訊界流行一些越來越長的程式語言，表達一個動作變得很費力，
  以c#或java為例，為了一句SQL要先寫一大堆字，程式師無法直接說我要跑SQL，
  要先念念有詞繞一圈長咒語，才說我要跑SQL。既是咒語就不是人說的話，
  利用MIP能辨識巨集、宏、macro的特性，我們直接說人話，直接下SQL要求結果，
  用MIP寫一個特定的資料查詢功能不會超過5行。

  這幾年流行的程式語又更長了，程式中不斷宣告物件的屬性。
  1個屬性佔1行，1個物件有9個屬性，5個物件就45行，這些物件都長得很像，
  整篇程式看起來就幾個字不斷的繞口令。難道我們不能把它排成9乘5的矩陣，
  讓表達簡潔嗎?所以我們應該讓MIP有操作矩陣的能力，
  助你從一行一行寫程式的一維視角，轉為一矩一矩寫程式的二維視角，程式變短。
  再推廣之，把圍棋的棋子點位描述成二維矩陣，用MIP 來寫圖形比對，程式更短。
  
  MIP用途不僅在縮短一支程式，而是縮短幾十支程式。當你有幾十支程式要寫，
  你找出這幾十支程式共同的部份，分離出相異的部份，把相異的部份排成矩陣，
  呼叫MIP，它就幫你組合，寫完這幾十支程式，實現軟體微縮術。

  本文將從MIP的基本指令開始說明，延伸談到高級應用。

### 語言的特點
 (特點1 網頁輸入輸出)它的預設操作環境是網頁，輸入是網頁，輸出也是網頁。
    輸出網頁裏還可以有輸入框，讓你再輸入下一波，得到下一波的網頁輸出。
    所以它運作起來就是一個完整的應用功能。如果你想要輸出文字檔也可以，
    例如輸入SQL， 它可以輸出查詢結果到檔案，方便讓你把結果灌入另一電腦。
    例如輸入你自定的方言，它就翻譯成目標語言，存成檔案，方便下一波執行。
  
 (特點2 巨集變數)凡是"短字 == 一串字(包含換行符號)"， 就是賦值給一個短字，
    若短字是既定關鍵字，MIP執行既定動作，例如操作SQL，發http給其它電腦。
    若短字非既定關鍵字，那就是定義了一個巨集符號代表了一串字。
    一般的巨集編程一旦值定義了，值就固定。在MIP裏值可以變動，值也可以是函數。
    一般的巨集編程指令只能往下，不能goto跳躍。MIP除了goto 還有gosub跳去返回，
    還有if-then-endif，以及for-next，所以MIP不只是一個巨集語言(宏語言)，
    而是一個描述語言(script language)。

 (特點3 向量式指令)變數只能置換一字一詞，利用不定詞可以置換一整個向量，
    或置換一整個矩陣，使一行MIP程式代替幾十行程式，一支程式代替幾十支程式，
    實現軟體微縮術。
 
### 安裝  
  本軟體目前只能在windows+IIS作業環境下使用，由1個程式檔以及3個資料檔構成。
  (MIP.aspx,     cDBlist.txt, cSPlist.txt, cUSlist.txt)
  請到 https://github/longinlin/MIP3.1 點畫面上的[view code]下載。
    
  然後打開你要安裝的電腦，
  建子目錄c:\MIP\webc ，貼入MIP.aspx，
  建子目錄c:\MIP\webd ，貼入上述的後面3個檔案， 
  建子目錄c:\MIP\webt ，備用，此目錄要允許IIS寫入資料，
  建子目錄c:\MIP\webq ，備用，此目錄要允許IIS寫入資料，
  打開IIS管理員，在IIS裡建立虛擬目錄MIP，令其實際位置指向 c:\MIP\webc
  打開瀏覽器，網址打localhost/MIP/MIP.aspx，出現畫面 請輸入帳密 即安裝完成。
  微軟各版常讓人安裝受挫，若遇安裝不順，冒火之餘，請看文末的'安裝問題集解'。

### 寫簡單的程式
  (例一)打開瀏覽器，網址打localhost/MIP/MIP.aspx，看到請你輸入帳密的登入畫面，
  輸入帳密(admin,admin9)，看到有上下兩個網頁型輸入框，
  於下框寫 
    show== Hello world !
  按[確定] 即可看到結果
  
  (例二)寫一個簡單的加法
  於下框寫
    aabb==eval| 10+5
    ccdd==dateadd||5
    show==aabb , ccdd
  按[確定]即可看到 15 逗點 今天加5天的日期
  其中eval是一個任意加減乘除函數， 直線符號後面是函數的參數
  
  (例三)乘法
  於下框寫
    show==eval|3*5
  按[確定]即可看到 15 
  
  (例四)九九乘法表
  於下框寫
    uuuu==1,2,3
    vvvv==4,5,6
    show==gu2vx|uuuu|vvvv| [ui]x[vi]=@[eval|[ui]*[vi]]# |td 
  按[確定]即可看到九九乘法表之一部份:
    1x4=4  2x4=8  3x4=12  4x4=16
    1x5=5  2x5=10 3x5=15  4x5=20
  其中 @[...]# 是把函數放在字裏行間的表達法。
  @  這個符號看起來像ca， 此處可以唸作call, 
  ]# 用來表示函數結束
     
### 呼叫資料庫(SQL)， 或呼叫作業系統(DOS指令)
  於下框寫
    conndb==db36
    sqlcmd==select * from tb2
  按[確定]即可看到 tb2 的內容。

  要呼叫DOS指令，則於下框寫
  doscmd==
    echo 123 > c:\tmp\test2.txt
    echo 456 > c:\tmp\test3.txt
  exit==done    
  按[確定]即執行兩行echo，讀者可以到 c:\tmp 看結果
  這裏看到'等於等於'右方沒有字，於是MIP往下集字
   
### 輸入、計算、輸出
  所有的電腦程式都可分解為(輸入、計算、輸出)三段，在MIP如何表達呢?
 
  於上框寫 name2==John             這就是輸入
  於下框寫 add99==add|2|3          這就是計算
  下框再寫 show==name2, 2+3=add99  這就是輸出
  按[確定]後，畫面出現 John, 2+3=5 輸出到螢幕上
  
  如果要輸出到檔案呢? 
  於上框寫 name2==John           
  於下框寫 
    add99 ==add|2|3       
    answ  ==name2, 2+3=add99
    saveToFile, a123.txt ==answ
  按[確定]就會輸出到檔案c:/MIP/webt/a123.txt 。 
  若螢幕回報說檔案不能寫入，則要叫起IIS或檔案總管去增加寫入權限，請看安裝說明段。
  
  (輸入、計算、輸出)三段都有了，想把以上的程式變成一般人使用的功能，怎麼做?
  看到螢幕最下方還有兩個細細的輸入框，分別填上 test2.mip 和 測試2，
  再按[save new   ]，網頁就會顯示'儲存完成'，
  再按[show spList]，網頁就會顯示'測試2' 就是你剛剛製造的功能。
 
  你能操作這些畫面，因為當初你是用工程師 admin 的身分登入。
  admin身分的操作模式就是"工程師模式"。 
  若想看一般user的使用效果，你要換成某user的帳密登入。
  請從功能列表中選擇[登出]，網頁請你輸入帳密，輸入帳密(0800,0809) 
  就看到網頁有一個[測試2]的超連結。現在你可以任意點選，現在就是 "使用者模式"。
    
### 充分發揮MIP的功能
  從上面的例子可以看到==是指定符號，
  符號左右方可以任意空白，空白都會切掉不要在乎。也不要在乎左右方是數字或文字，
  因為本軟體裏面只有一種資料型態，那就是文字。
  你要在乎文字往上可以建立一維序列，就是向量，往上可以建立二維序列，就是矩陣，
  幾十行文字可以組成一段文章，就是程式模板。
  本軟體在乎文字、向量、矩陣、程式模板的各種組合，目標是簡化寫作。

  要發揮MIP的功能，
  還需瞭解: 編輯三個清單: 功能清單、 使用者清單、 資料庫清單，
  接著瞭解: 變數、關鍵字、函數
  接著瞭解: 洗染、解函、解罩，
  接著瞭解: 跳躍關鍵字: gosub, if-else-endif, generally-butif
  接著瞭解: 不定詞函數: gu1v, gu2v, gu2vx, gu1m, sqlcmd, show
  進階瞭解: 資料庫輸出直轉橫(在Excel稱為樞紐分析), 矩陣直轉橫
  這樣MIP就能幫助你以簡短的文字表達意念，不用寫長程式。
  
  以下就從編輯'功能清單' 開始說明。
  
### 編輯'功能清單'
  本軟體把一個公司需要的眾多功能顯示在一頁畫面上，讓使用者點選。
  要編輯功能清單就打開c:\MIP\webd\cSPlist.txt，看到如下內容:
    [td]  
    [tf]功能段代號A, 功能段名稱A
        程式檔名1,   程式名稱1  
        程式檔名2,   程式名稱2  
    [tf]功能段代號B, 功能段名稱B
        程式檔名3,   程式名稱3  
        程式檔名4,   程式名稱4 
  以[td]開頭的這一行使功能清單向右換欄，以免清單往下太長。
  以[tf]開頭的這一行代表其下方一小段是一個功能段，
  將來在cusList.txt裏可以指定某人可以操作幾個功能段。
 
### 編輯'使用者清單'
  本軟體可以管理使用者權限，
  打開c:\MIP\webd\cUSlist.txt
  每一行的欄位依序是姓名、帳號、密碼、 公司名稱、 部門名稱、 員工工號、 可允許使用的功能段
  本軟體可以允許多個公司多個部門的人員一起使用 所以要寫下 公司名稱 部門名稱 員工工號 
  若只允許某人僅能使用某3個功能段 則在 "可允許使用的功能段" 那欄寫上3個功能段名稱，例如 aa bb cc，
  若要允許某人可以使用全部功能段  則在 "可允許使用的功能段" 那欄寫上all

### 編輯'資料庫清單'
  MIP的基本運作不需資料庫，若你讓它連接到多個資料庫，它就如虎添翼。
  連接方式如下，打開 c:\MIP\webd\cDBlist.txt 看到如下內容
     HOME      : ms    : some connection string1
     db123     : ms    : some connection string2
     db456     : ms    : some connection string3
  第一行宣告一個預設的資料庫，將來寫程式沒說連接哪個資料庫，就是連接這一個       
  第二行宣告一個稱謂db123，以後只要說連接db123， MIP就去連接這資料庫
  接著在MIP工程畫面輸入一些字，舉例:
      conndb==db123
      sqlcmd==select * from tb2
  就可看到資料表 tb2 了
  
### 變數、關鍵字 
  在工程畫面寫:
      x002==2
      x003==3
      show==x002+x003
  其中x002和x003就是自定變數，MIP原本不認識x002和x003，由你定義了它們。
  其中show  就是關鍵字，MIP執行show預定的動作，也就是顯示，顯示了 2+3
　上數變數x002能寫成x2嗎，不行，MIP會警示變數名太短，為了防錯至少要4個字母。
  上述畫面只顯示2+3 ，MIP不會加在一起嗎，會，請使用add函數
      show==add|x002|x003
  畫面會顯示5 ， 下一節再說明add函數。
  show是最常用的關鍵字，另外sqlcmd也很常用到，本文後半段'關鍵字全集'再說明。

  (變數性質一)變數可以更換其值
       例如下面這程式:
                 aaaa==1
                 dddd==2
                 aaaa==3               
       當MIP第二次看到aaaa，不管aaaa以前是什麼，aaaa現在就是3。
       又例如:
                 aaaa==0
                 label==runway
                        aaaa==add|aaaa|1
                        show==aaaa,
                 goto==runway      
       這裏讓aaaa一再更換其值。這段程式將顯示               
           1, 2, 3, ...40, 41, jump too many times   
       這段程式是無限迴圈，但MIP限制只能迴圈40次，所以MIP停下來。  

  (變數性質二)變數可以含換行符號
       例如下面這程式:
               c001==
                     bb,123
                     cc,456
               d001==ff
       MIP發現 c001==後面沒東西，就往下繼續找，直到下一個==出現，所以形成
               c001==bb,123[cr]cc,456  其中[cr]代表一個換行符號
       如果你寫:
               c001==
               d001==ff       
       則c001就是空字串，就是長度為0的字串。
  
### 函數
  函數會做預先定義好的動作，函數很多，請看函數全集。舉例加法計算add:
      show==add| 1 | 2  
  畫面會顯示3。 
  為了程式師寫作方便，函數不分大小寫，函數的參數用直線號隔開。
  
  又例如eval是任意加減乘除 :
      show==eval | 1+2*3
  畫面會顯示7。   
  
  又例如ifeq是比較相等與否的函數 :
      x002==2 
      show==ifeq|x002|2|yes2 |not2  
  畫面會顯示yes2。
  
  又例如ifeq搭配goto :
      x002==2 
      goto==ifeq|x002|2|yes2 |not2  
  這樣程式會跳到標號yes2的那一行繼續往下跑。
  
  函數也可以夾雜在字裏行間使用，例如:
      show== Hi, I was happy in recent @[eval|2*3+1]# days 
  畫面將顯示 Hi, I was happy in recent 7 days    
  也就是整個函數可以用 @[...]# 括住。 
  @[...]#口語上怎麼唸呢? @看起來像ca，所以@[...]# 唸作call，或簡稱為@函數。
  記得 @和[ 要緊連在一起，而 [...]內各參數則可鬆散，其前後空白將被忽略。
  
  除了既定函數，變數也可以當成自定函數，但自定函數只能作文字變換，例如:
      myFunc==I like someOne
      show==@[myFunc|like=love|someOne=Mary]#
  畫面會顯示            I love Mary 
  既定函數不區分大小寫，自定函數或是變數有區分大小寫。
  自定函數的參數用法是 舊字=新字將取代之 ， 各參數用直線號隔開。
  
  函數和參數是以平等的身份居住在[...]裏，所以可以讓函數名稱居住在第二格。
    show==result is @2[ abc   | inside |abcde | in | not in ]# , see ?
  這句話等效於:
    show==result is @[ inside | abc    |abcde | in | not in ]# , see ?
  函數名稱在第一格不符人類習慣，但電腦喜歡它，於是叫起 inside函數，得到
    show==result is in , see ?
    
  又例如
    x002==2
    show==answ is @2[x002   |between| 1 | 4 |ok| not ok]# , see ?
  這句話等效於:
    x002==2
    show==answ is  @[between|x002   | 1 | 4 |ok| not ok]# , see ?
  於是叫起 between函數，得到 
    show==result is ok , see ?
  
### 程式預解
      MIP跑起你的程式，當看到include==*** 則載入這一行的內容成為程式的一部分
      若看到某一行有//則忽略其右方，例如  a001==1 //;;b002==2  等效於a001==1 
      例如 //a001==1;;b002==2 則這整行忽略。但是若這一行有://  則整行都要。
      
      若看到;;連續兩個分號，則改為換行符號。但若這一行有'uvar'則不要改。   
      若看到某行有'if==' ， 下面又有一行'endif==' ， 則MIP知道這是一個區塊。
### 單一行程式運作順序: 洗染、解函、解罩
  (一行程式內部動作1)洗染:
     MIP一行一行都記住了，繼續往下跑，並對下方文字進行置換，例如
                                     a001==1
                                     ccb1==2
                                     show==hi ccba001y ready 
     首先a001置換這一行==的右方，於是 
                                     show==hi ccb1y ready
     接著ccb1置換這一行==的右方，於是
                                     show==hi 2y ready
     於是顯示
                                           hi 2y ready
     程式往下跑，文字被上方文字置換。文字置換稱為洗染。洗染有幾個特點: 
         
               
     (洗染特點2)有一些關鍵字的值可能含有幾十萬個英文字母，
     你允許別的關鍵字洗染它，但你不想允許它洗染別的關鍵字，
     這時你要給它取名字用matrix開頭，例如叫它matrix1或matrix2，請看這程式片段:
             kk==3
             matrix2==
              1,2,kk
              4,5,6
             show==say(matrix2)
     則矩陣內儲值將會是
             matrix2==
              1,2,3
              4,5,6        
     矩陣內的值被洗染。而螢幕會顯示 say(matrix2)，螢幕不會顯示say(1,2,3,4,5,6)
     
  (一行程式內部動作2)解函:                      
     當來到某一行kk==vv，文字被vv洗染後，字面上有函數將會被解開，
     舉例一:
               say==said
               kkk==ifeq|1|1| say y |say n   
            右方整個是一個函數，於是解開函數，簡化成為
               kk==said y
     舉例二: 
               kkk==hello @[ifeq|1|1| say y |say n]#,cc 
            @函數夾雜於字裏行間，於是@函數被解開，簡化成為
               kkk==hello say y, cc
     舉例三:
            若遇@函數內層有@函數，應該先解開內層:
               aa==1
               kk==see @[ifeq| 2 |  @[add|aa|1]# | two | unknown]# so what
            則簡化為
               kk==see #[ifeq| 2 |  2            | two | unknown]# so what
            再簡化為
               kk==see two so what
    
            說"應該先解開內層"， 就暗示說有時候應該"後解開":
            當@gu函數內層有@函數，先解開@gu函數，後解開內層@函數
            這一個小小的順序變化，會讓gu函數釋放繽紛的味道。

     舉例四:
               aa==1
               show==gu1v|4,5,6  |  @[add|aa|[vi]]#  |  +
            它被洗染變成
               show==gu1v|4,5,6  |  @[add|1 |[vi]]#  |  +
            再被解開外層變成
               show==@[add|1|4]# + @[add|1|5]# + @[add|1|6]# 
            再被解開內層的@函數
               show==5 + 6 + 7
            於是顯示
                   5 + 6 + 7  
     這種@函數讓外層先做完，它接在後面做的行為稱為: 後解開。
     為甚麼要後解開? 就像一顆糖球外殼先溶解，裏面的小小球再溶解，
     瞬間在舌尖釋放出繽紛的味道。
     只有後解開才能瞬間釋放出繽紛的程式碼，大量減低你的碼字寫作。
     給它取個英文名吧: calling-function-after-vector-solved 
                 
  (一行程式內部動作3)解罩
     當某個字不想被洗染，程式師可以故意把[]擠在這個字裏，例如:     
        aa==2
        show==I say a[]a=aa
     畫面應顯示 
        I say a[]a=2
     這個[]是一個關鍵字，我們可以把它唸作'遮罩'其用途是防止洗染。
     當左方關鍵字要接收右方值之前，MIP自動把[]去掉，稱為'解罩'。
     在這例中，當show要接收右方值之前，MIP自動把[]去掉，所以實際顯示為:
        I say aa=2
     
     在進入左方之前把字換掉的動作統稱為'解罩'，這樣的字只有幾個:
     []      換成 無
     $space  換成 一個空白格
     $enter  換成 一個換行符號 ( ascii_10+ ascii_13 )
     $fncall 換成 @
     $fnpipe 換成 |
     
     
  (一行程式內部動作,總結) MIP處理一行程式的動作順序是:
     凡是看到 kk==vv 這樣的句子，把前面認識的關鍵字依序灌進去洗染，
     洗染後裏面也許有函數，那就解函。
     解函後裏面也許有遮罩，那就解罩。
     處理後的值傳給左方kk，若左方kk是一個既定關鍵字，那就做既定的事，
     然後再跑下一行，程式就這麼一行一行運作。
                 
### 程式跳躍 goto, gosub
  程式運作是一行一行依序往下，但可以跳躍。最基本的跳躍就是goto ，
  還有 if ... then ... else ... endif
  還有 for ... next
  還有 forEach ... next
  還有 gosub label ... label ... return
  
  (跳躍1)goto 舉例:
                i==2
                goto==ifeq| i| 2| work2
                show==say1
                exit==...
                
                label==work2
                show==say2
         這例子會顯示 say2 。 goto可以向下方的label跳也可以向上跳。
         
  (跳躍2)if 舉例:
                 i==2
                 if==ifEq|i|2
                     show==say2
                 else==
                     show==say1
                 endif==
         這例子會顯示 say2 
         if那一行的寫法一定要寫成 if==if*** ，一定要叫某個二擇一函數，
         函數後只要寫想比較什麼，至於[比較成功]或[比較失敗]怎麼處理不要寫。
         換行才開始寫[比較成功]做什麼事，再寫else做什麼事。     
         
  (跳躍3)for 舉例:
                 for==ii | 1 | 9 |2
                     show==sayii,
                 next==
         這例子會顯示 say1,say3,say5,say7,say9
                        
  (跳躍4)foreach 舉例:
                 foreach==ii|9,11,88
                     show==sayii,
                 next==
         這例子會顯示 say9,say11,say88
                 
  (跳躍5)gosub 舉例:
           aa==1
           gosub==ifeq|aa|1|work1|work2
           aa==add|aa|1
           gosub==ifeq|aa|1|work1|work2
           aa==add|aa|2
           gosub==work1
           show==done,
           exit==..

           label==work1
           show==do work1(aa),
           return==

           label==work2
           show==do work2,
           return==

          按[確定]後 將顯示 do work1(1), do work2, do work1(4), done, ..  
          
           
  
  


###預先定義好的關鍵字 全集 unfinish   
   預先定義好的關鍵字會促使電腦做事
   (*) sqlcmd ，將發送一段SQL給資料庫引擎，這一段SQL可以含有多個句子。
    發送前會先把okclick改成onclick
    sqlcmd==
	    some_SQL1;
		some_SQL2;
		some_SQL3;
		
	(*) saveToFile ，將多行文字存到檔案fcc.txt裏
    saveToFile,fcc.txt==
        this is fcc line1
        this is fcc line2
        
	(*) addString ，將多次收集文字以方便最後存到檔案裏
    addString,paragraph99_txt ==123
    addString,paragraph99_txt ==456
    saveToFile,paragraph99.txt==paragraph99_txt  
                   
### 函數 全集 
  MIP有區分大小寫的，自定函數有區分大小寫，但這樣有些僵硬，
  所以讓函數的名稱可以任意大小寫，驚嘆號前後的空白都不計。
  下面列出預先定義好的函數。
 *f add                   例:  add |1|2
 *f eval                  例:  eval|1|2
 
 *f 二者擇一的一些函數:
 *f ifEq      若等於           例: ifEq     |2  |2   |is2|not2   
 *f ifNe      若不等於         例: ifNe     |1  |2   |ne |eq
 *f ifGt      若大於           例: ifGt     |1  |2   |no |yes
 *f ifGe      若大於等於       例: ifGe     |1  |2   |no |yes
 *f ifLt      若小於           例: ifLt     |1  |2   |yes|no       
 *f ifLe      若大於等於       例: ifLe     |1  |2   |yes|no   
 *f iflcEq    若小寫後相等     例: iflcEq   |HH | hh |yes|no
 *f ifLenEq   若字的長度相等   例: ifLenEq  | ab| cd |yes|no
 *f ifIn      若內在於         例: ifIn     | bc|abcd|yes|no
 *f ifNum     若為數字         例: ifNum    |1.2     |yes|no
 *f ifPosi    若為正數         例: ifPosi   |123     |yes|no
 *f ifUsa     若是西元yyyymmdd 例: ifUsa    |20040102|yes|no
 *f ifRoc     若是民國 yyymmdd 例: ifRoc    |  930102|yes|no
 *f ifBetween 若界於           例: ifBetween|xy |aa  |dd |yes|no

 *f 常用於串接SQL句子的函數: 
 *f ifV      ,seeV       若有值          
       例如:
            inputx123==456
            condition==ifv|inputx123|and xqty=inputx123
            show     ==where 1=1 condition    將顯示:
                       where 1=1 and xqty=456
       又例如:         
            inputx123==
            condition==ifv|inputx123|and xqty=inputx123
            show     ==where 1=1 condition    將顯示:
                       where 1=1              也就是跳過此條件
            也可以緊湊寫成一句:   
            show==where 1=1 @[ifv| inputx123| and xqty=inputx123]#
                      
           
 *f andRange  製造一段SQL的查詢條件  例: 
      input12==2004/01/02-2004/03/02
      condition2==andRange|kdate|input12
      show      ==where 1=1 condition2        將顯示:
                  where 1=1 and( kdate between '2004/01/2' and '2004/03/02')
      又例如:         
      inputsR1R2==2004/01/02
      condition2==andRange|kdate|inputsR1R2
      show      ==where 1=1 condition2       將顯示:
                  where 1=1 and( kdate = '2004/01/2' )
      又例如:         
      inputsR1R2==
      condition2==andRange|kdate|inputsR1R2
      show      ==where 1=1 condition2       將顯示空白 也就是忽略此條件:
                  where 1=1         

 *f 有關日期的一些函數:
                  
 *f ifValidDateROC 查輸入日期合理否 例: show==dateVerify|991301    將顯示錯誤  
                   又且 若年份在00到150之間為合理，        在此之外則顯示錯誤 
 *f ifValidDateUSA 查輸入日期合理否 例: show==ifValidDate|20041301 將顯示錯誤  
                   又且  若年份在1900到2040間為合理，      在此之外則顯示錯誤 
 *f ifValidDate    同ifValidDateUSA
 
 
 *f dateConvROC    把各種日期表示法轉成你要的格式，輸出年份為民國，例如:
                   show==dateConvROC|Jan 22, 1999|yyyy/mm/dd 將顯示  88/01/22
 *f dateConvUSA    把各種日期表示法轉成你要的格式，輸出年份為西元，例如:
                   show==dateConvUSA|Jan 22, 1999|yyyy/mm/dd 將顯示1999/01/22
 *f dateConv       同dateConvUSA

 
 *f dateAddROC     某西元日期或民國日期，加個幾天，輸出民國日期，例如:
                   show==dateAddROC|19270101|3|yyyymmdd
 *f dateAddUSA     某西元日期或民國日期，加個幾天，輸出西元日期                   
 *f dateAdd        同dateAddUSA
 
 
 *f dateDiff       某西元日期或民國日期，二者相距幾天   例如: 
                   show==dateDiff| 20041130| 20041202  將顯示2               
                   show==dateDiff| 20041130|   931202  將顯示2               
            

 
 *f 以下是字串函數:                  
 *f inner          取界內的值       例: show   ==inner|I Love Mary|I|M 將顯示 Love
 *f mobileTel      電話號碼前面補0  例: show   ==mobileTEL|988112233   將顯示 0988112233
                   
 *f cookieW        對某cookie寫值   例: jobDone==cookieW|cook22   |v22
 *f cookieR        對某cookie拿值   例: cook22V==cookieR|cook22   


      
		  
                         
###查詢資料庫資料

###新增多筆資料

###新增一筆資料

###刪除一筆資料

###修改一筆資料

###增刪修查一起工作

###顯示資料直轉橫(顯示樞紐報表)

###多維度靈活查詢

### 庫存撿貨系統
  想像你要建造一個庫存撿貨系統，軟體工程第一步收集需求。需求是:
  (1)倉庫要有儲位，入庫時隨意放置，出庫時要顯示儲位引導人員撿貨。
  (2)要能顯示存放最久的那些商品，進倉庫商品的平均存放時間是多久?
  
  軟體工程第二步 設計能顯示上述資料的記錄簿，也就是資料表格。
  既然要看商品的進出時間，何不讓記錄的每一行就是記載著商品的入庫到出庫過程?
  當入庫3顆蘋果，每顆出庫時間都不同，何不讓每一行就記載著單一顆商品的過程?
  於是表格命名為 oplife 欄位如下:
  每行流水號, flow int(1,1)    資料庫引擎會自動填入值，由1起，每行加1
  入庫批號,   inno varchar(16) 
  入庫日期,   indt varchar(16)
  商品代號,   skno varchar(16)
  放置儲位,   ceno varchar(16)
  出庫批號,   ouno varchar(16)
  出庫日期,   oudt varchar(16)   
  
  軟體工程第三步 列出各個場景，其中之一是入庫
  有3顆蘋果5顆橘子要入庫，隨貨附有商品清單，清單上有採買編號。
  人員帶著商品站到儲位A2，放上3顆蘋果，在貨單上蘋果那一行註記A2,3
  人員帶著商品站到儲位B2，放上3顆橘子，在貨單上橘子那一行註記B2,3
  人員帶著商品站到儲位C2，放上2顆橘子，在貨單上橘子那一行註記C2,2
  人員回到辦公桌，要把註記輸入電腦。
   
  軟體工程第四步 寫這個入庫功能，編輯文字檔in02.mip，內容如下
      採買編號==
      以下填入商品,儲位,數量(填入前先把下框文字清掉) 
      入庫明細==
      蘋果,??,??
      橘子,??,??
      #1#2
      opdt==dateadd||0
      sqlcmd==
           select inno,indt,skno,ceno, iqty=0 into #p from oplife where 1=2
      sqlcmd,入庫明細==
           insert into #p ('採買編號', 'opdt', 'fdv01','fdv02','fdv03')
      sqlcmd==          
           begin2:
             insert into oplife (inno,indt,skno,ceno) from #p where iqty>0
             update #p set iqty=iqty-1; delete #p where iqty<=0
           if exists (select * from #p) goto begin2
      show==入庫記錄完成
  編輯文字檔完成，存起來。
   
  再列出另一個場景，是撿貨準備出庫
  有2顆蘋果2顆橘子要撿貨準備出庫，出庫單編號Q33已印成紙，紙上有商品明細。
  希望讓電腦顯示商品位置以方便人員撿貨。於是編輯文字檔in02.mip，內容如下
      撿貨前請填入商品,數量。電腦會告訴你儲位
      填入前請先把下框文字清掉
      出庫明細==
      蘋果,??
      橘子,??  
      #1#2
      sqlcmd,出庫明細==
      --最早入庫的 優先出庫 所以下一行寫order by flow
      select top ftv02 skno,ceno from oplife where skno='fdv01' order by flow
      show==應撿貨儲位如上
  編輯文字檔完成，存起來。         
  
   
  再列出另一個場景，是出庫完成後的登載。於是編輯文字檔ou02.mip，內容如下
      出庫編號==
      以下填入商品,儲位,數量(填入前先把下框文字清掉) 
      出庫明細==
      蘋果,??,??
      橘子,??,??
      #1#2
      opdt==dateadd||0      
      sqlcmd==
        select inno,indt,skno,ceno, iqty=0 into #q from oplife where 1=2
      sqlcmd,入庫明細==
        insert into #p ('採買編號', 'opdt', 'fdv01','fdv02','fdv03')
      sqlcmd==          
        begin2:
          declare @flow as int,   @skno as varchar(16)
          select @flow=min(flow), @skno=min(skno) from oplife where
            skno=(select top 1 skno from #q where iqty>0) and ouno is null
          update oplife set ouno='出庫編號', oudt='opdt' where flow=@flow
          update #q set iqty=iqty-1 where skno=@skno
          delete #q where iqty<=0
        if exists (select * from #q) goto begin2
      show==出庫記錄完成
  編輯文字檔完成，存起來。
  
   
  再另一個功能，希望顯示商品平均放在倉庫多久。於是編輯文字檔LF01.mip，內容如下
      #1#2
      sqlcmd==
       select 平均庫齡=convert(
                               varchar, avg(  datediff(d,indt,getdate())  ) 
                              )+'天'    from oplife where oudt is null
  編輯文字檔完成，存起來。
       
       
      
  
  
  
  
  
  
 

### 跨資料庫傳輸: 把文字檔轉入DB
            dataFrom
            dataTo
            dataToTable

### 跨資料庫傳輸: 經記憶體傳輸資料
### 跨資料庫傳輸: 經檔案多批次傳輸資料

### 呼叫外界: 發信
### 呼叫外界: 發簡訊
### 呼叫外界: URL get, post
### 呼叫外界: ftp
### 呼叫外界: 呼叫window command 或呼叫exe

### 被外界呼叫: URL get,post
### 被外界呼叫: 被VB, 被排程器

### 顯示畫面的修飾
   下面這一行 在應用模式下 會顯示成 aa: 後面帶一個輸入框 長度20
       aa==hello
	   
   下面這一行 在應用模式下 會顯示成 aa: 後面帶一個輸入框  框之右方有提示文字 say anything
       aa==hello $; say anything 
	   
   下面這一行 在應用模式下 會顯示成 aa: 後面帶一個輸入框  框之右方有提示文字 say anything 而框的長度拉長為30
       aa==hello $; say anything $; 30
	   
   下面這一行 在應用模式下 會顯示成 aa: 後面帶一個輸入框  框之右方有提示文字 say anything 而框的長度拉長為30
       aa         ==hello      $;  say anything $; ii~30
	   key        ==value      $;  explainWord  $; typeWord   ( typeWord could be   "epwd"    "iibx"    "iib2"    "entr"    "hidn"    "mmbx"    "comb"   "ckbx"  )
	   ikey(cmNxy)  ival(cmNxy)    imrk(cmNxy)     ptyps(cmNxy) 
	   
### 安裝問題集解  
  可能問題:  找不到這電腦上的IIS管理員，
             若有看到[伺服器管理員]這圖示，點它，進去看到角色，
             角色下有網頁伺服器， 對它按右鍵新增角色服務，就可顯示IIS
    
  可能問題:  輸入網址 MIP/MIP.aspx 看不到登入畫面， 卻看到 HTTP錯誤404.17  
  解決方法:  應檢查ASP.NET有沒有安裝，也就是:
             開始> 控制面板> 程序和功能> 打開或關閉Windows功能> 
             Internet信息服務> 網際網路服務> 應用程序開發功能> ASP.NET
             把這個勾起來
    
  可能問題:  若webc目錄被設定共用後，IIS卻說虛擬目錄不存在，說沒有web.config
  解決方法:  不須添加web.config ，只要進iis-manager 按右鍵> 管理虛擬目錄> 
             進階設定> 實體路徑認證， 打入有存取權限的帳號密碼即可
             順便的，IIS寫檔案不成功的問題也解了
    
  可能問題:  畫面說程式有錯，但不能顯示明確原因
  解決方法:  在github檔案區還有一個小檔案web.config，複製到c:\MIP\webc即可。
    
  可能問題:  畫面說 c:\mip\webd 不能寫檔
  解決方法:  進iis-manager 按右鍵> 管理虛擬目錄> 進階設定> 實體路徑認證， 打入有存取權限的帳號密碼
             或是用檔案總管
	   