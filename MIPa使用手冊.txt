## 這是一個軟體
  它解譯一個程式語言MIP(Macro Interactive Processing)， 
  並自帶編輯界面，用在快速生產商用程式，所以本軟體稱為MIP builder。 
  它內建幾十個既定動詞，所以它能操控電腦， 
  它認得模板(macro、宏、巨集)，所以它也能組合模板製造其他語言去操控電腦。
  .
  它是一個script解譯器，能在前端顯示互動式網頁，也能在後端連接資料庫；
  它是一個macro組合器，能組合變數與模板產生另一程式並且執行。
  它是一個語言，也是一個工具，用來縮短程式碼，提升資訊人員的生產力。
  .
## 適用場合  
 (1)生產商用型程式 存取資料庫
   在多年前，我看到有資訊人員每天都在下SQL指令，應付使用者的各種需求，
   他說使用者的需求變來變去很難寫成程式，希望有一個網頁型的SQL輸入框，
   可以任意調整參數。以後讓使用者自行調整參數，就成為應用功能。
   從這構想開始，設計了一個生產程式的母機，這就是MIP的起初功能。
   本文將舉例兩個MIP寫的應用系統: 庫存撿貨系統，問卷評分系統。
 (2)生產另一語言
   物件導向流行以來，資訊界的程式語言越來越繁瑣，於是近年來又回頭流行巨集、
   模板、宏編程、元編程。MIP就是元編程語言，可以用來寫製造程式的程式。
   它把程式模板當文字，文字當變數，組合變數就是在組合模板，產生最終的程式。
   過程就像把php和html 混雜寫，把html 當文字，輸出一個純粹但有彈性的html。
   我們可以把MIP和java 混雜寫，把java 當文字，輸出一個純粹但有彈性的java。
   我們可以把MIP和C方言混雜寫，把C方言當文字，輸出一個純粹但容易懂的C   。
 (3)縮短程式 用矩陣表達式
   這幾年流行的程式語又更長了，程式中不斷宣告物件的屬性。
   1個屬性佔1行，1個物件有9個屬性，8個物件就72行，這些物件都長得很像，
   讀完繞口令的72行，程式重點還沒開始。何不把它們排成9乘8的矩陣，整齊清楚。
   用在商業程式，一行一行寫程式的一維思考，就可以轉為矩陣化的二維思考。
   用在圍棋程式，圍棋黑白點位就是二維矩陣，冗長的圖形辨認程式可以縮短。
 (4)一次生產多程式
   MIP不僅縮短一支程式，還可以縮短幾十支程式。當你有幾十支程式要寫，
   你找出這幾十支程式共同的部份，分離相異的部份，呼叫MIP就組合出幾十支程式。
   這篇說明文將從MIP的基本指令說起，延伸談到高級應用。
   .
## 語言的特點
 (特點1 網頁輸入輸出)
    它的預設操作環境是網頁，輸入是網頁，輸出也是網頁。
    輸出網頁裏還可以有輸入框，讓你再輸入下一波，再輸出下一波的網頁。
    所以它運作起來是一個完整互動的應用功能。你也可以把輸出轉到檔案，
    以方便傳遞給另一電腦。
  . 
 (特點2 元編程)
    凡是你寫一行  "短字 等於 "一串字"， MIP就認為是賦值給短字，
    若短字是內建既定詞，那麼MIP執行既定動作，例如操作SQL，或發http給其它電腦。
    若短字非內建既定詞，那就是你定義了一個變數，用來代表那一串長字。
    變數可以組合，也可以用goto,call,if,for編輯之，也可以立即執行之，
    或把它當做是參數丟給下一段程式。
  .
 (特點3 向量式指令)
    變數只能置換一字一詞，代稱詞可以置換一整個向量，或置換一整個矩陣，
    例如在SQL常寫 姓名=csName, 住宅電話=csTELE, 手機=csMobi, 地址=csAddr...    
    在MIP只要寫 v( fdTITL=fdNAME )s 。 這 v(...)s 就是向量句。 
    用了向量句，以後只要改向量值，一個程式模板可以用於幾十支程式。
  .
 (特點4 外接任意軟體)
    MIP可以搭配另一個獨立的軟體，把組合出來的文字傳給那軟體執行。
    MIP最常搭配的軟體是資料庫引擎，傳SQL句子給資料庫，又收回結果。
    MIP可以把收回結果再傳入另一資料庫，或傳給人閱覽修改。
    MIP也可以搭配 C編譯器，傳遞文字給它編譯立刻執行。這時MIP像是個預編器。
    MIP也內建有http遞送句，傳訊給外機後收回結果，再進一步處理。
    
  
## 安裝  
  本軟體MIP目前只能在windows+IIS作業環境下使用，
  請到 https://github/longinlin/MIP3.1 點擊畫面上的[view code]下載全部檔案，
  複製到你的電腦的一個資料夾裏面(舉例c:\MIP\webc)。
  打開IIS管理員，在IIS裡建立虛擬目錄MIP，實際位置指向你的資料夾
  若安裝不順(微軟IIS換版常讓人一肚子不順)， 請看文末的'安裝問題集解'。
  打開瀏覽器，打入網址localhost/MIP/MIP.aspx，看到提示請你輸入帳密 即完成。
  
## 一行的簡單程式
  (例一)打開瀏覽器，打入網址localhost/MIP/MIP.aspx，看到請你輸入帳密，
  輸入帳密(admin,admin9)，網頁畫面變成上下兩個輸入框。
  你於下框寫 
    show== Hello world 
  按[確定] 即可看到結果
  
  (例二)寫一個日期的加法
    show==dateAdd|now|5|yyyy-mm-dd
  按[確定]即可看到今天加5天的日期，其中dateAdd是函數，直線符號後面是參數
  
     
## 兩行的程式舉例: 
   (例一)製造一段PL語言的程式
         yName==John ;; helloWho==print "hello, yName"
         saveToFile==c:\tmp\a2.pl , helloWho
    按[確定]即可製造出 a2.pl這程式。
    其中;;相當於換行符號

   (例二)呼叫資料庫
         conndb==db55   //連接資料庫 ;; 詳情請看 編輯資料庫清單 那一小節
         sqlcmd==select * from mapper
    按[確定]即可看到 mapper 這表格的內容。
    其中//之後的文字是註解
  
   (例三)寫一個九九乘法表
         uuuu==1,2,3 ;; vvvv==4,5,6
         show==gu2vx|uuuu|vvvv| [ui]x[vi]= @[eval|[ui]*[vi]].  |td 
    按[確定]即可看到九九乘法表之一角:
         1x4=4  2x4=8  3x4=12  4x4=16
         1x5=5  2x5=10 3x5=15  4x5=20
    其中 @[...]. 是把函數放在字裏行間的立即表達法。
    @  這個符號看起來像ca， 此處可以唸作call, 
    ]. 用來表示函數結束
  
## 輸入、運算、輸出
  所有的電腦程式都可分解為(輸入、運算、輸出)三段，MIP語言的三段分解如下:
 
  打開瀏覽器，網址打localhost/MIP/MIP.aspx，看到 請輸入帳密，
  打入帳密(admin,admin9)，網頁畫面變成上下兩個輸入框
  你於上框寫 name==Joe            這就是輸入
  你於下框寫 add9==eval|2+3       這就是運算
  下框再一行 show==name, add9     這就是輸出
  按[確定]後，畫面出現 Joe, 5   輸出到螢幕上
  
  如果要輸出到檔案也很容易: 
  你於上框寫 name==Joe    
  你於下框寫 
             add9==eval|2+3        
             answ==name, add9
             saveToFile==a123.txt, answ
  按[確定]就會輸出到檔案c:/MIP/webc/a123.txt  
  
## 規劃使用者看到的輸出
  (輸入、運算、輸出)三段都有了，想把以上的程式變成一般人使用的功能，怎麼做?
  看到螢幕最下方還有兩個細細的輸入框，分別填上 test2.mip 和 測試2，
  再按[save new   ]，網頁就會顯示'儲存完成'，
  再按[show spList]，網頁就會顯示功能清單，有一選項'測試2' 就是剛剛製造的功能。
  
  存起來的test2.mip 可以用記事本打開來看，內容是:
    name==Joe
    #1#2
    add9==eval|2+3        
    answ==name, add9
    saveToFile==a123.txt, answ
  MIP自動加了第二行#1#2，這行之上對應上框，這行之下對應下框。 
  當這程式給使用者用時，上框將變成他填資料的畫面，下框他看不到。

  因為當初你用admin 的身分登入，所以你能在網頁上編程，這是[工程模式]。
  如果當初你以其它人的身分登入，只能看到功能，看不到程式，就是[應用模式]。
  現在請你從功能列表中選擇[登出]，螢幕畫面變成 請你輸入帳密，
  輸入帳密(0800,0809)後， 你看到網頁畫面中有一個 [測試2]的超連結。
  現在你可以點擊它，操作它。這就是 應用模式。
  
  在'應用模式'下，程式裏的上框會變成使用者填資料的輸入區。
  你可以用記事本編輯 test2.mip ，對輸入區做點變化，例如
        名字== 
        電話==
        #1#2    
        show==看到了 名字 電話
  然後再次點擊[測試2]的超連結，你將看到畫面上有新的輸入框，
  輸入區有多種變化，詳情請看 [輸入畫面集解]那一節。
  
## 發揮MIP的功能
  從上面的例子可以看到==是指定符號，
  指定符號左右方可以任意空白，這些空白都會清掉不要管它。
  不要在乎左右方是數字或文字，因為本軟體裏面只有一種資料型態，那就是文字。
  你要在乎文字之上的一維序列，就是向量，再往上可以建立二維序列就是矩陣，
  幾十行文字可以組成一段文章，就是模板。文字、向量、矩陣、模板可以任意組合。

  要發揮MIP的功能，讓我們分幾個小段落逐步介紹。
    首先瞭解: 變數、既定詞、函數、@函數(inline function) 
    接著瞭解: 資料庫及向量函數: sqlcmd, gu1v, gu2v, gu2vx, gu1m
    接著瞭解: 預解、洗染、解函、解罩
    看看範例: 資料增刪修查、跨資料庫傳輸、資料直轉橫(Excel所謂的樞紐分析)
    應用範例: 庫存管理系統、問卷調查系統、用程式製造程式、抽象圖形辨認
    權限管理: 功能清單、 使用者清單、 資料庫清單
  以下從變數開始說明。

  
## 變數 
  你可以寫三行程式:
      x002==2
      x003==3
      show==x002+x003
  其中的x002和x003就是自定變數，MIP原本不認識x002和x003，由你定義了它們。
  其中這show就是既定詞，MIP認識show，執行它既定的動作，於是顯示了 2+3
　上數變數x002能寫成x2嗎，不行，MIP會警示變數名太短，為了防錯至少要4個字母。
  上述畫面只顯示2+3 ，MIP會加在一起嗎，會，請使用eval
      show==eval|x002+x003
  畫面會顯示5 ， eval是做加減乘除的函數，直線符號後面是參數。
  
  (變數性質一)變數名稱可以含中文，或空格以及各種符號
       例如下面這程式:
           採購單號==
           sqlcmd==select * from pur1m where prno='採購單號'
       用中文變數寫應用功能，使用者看到的輸入框就是中文提示，很方便。
       
       又例如下面這程式:
           cond2==and iqty=1
           cond3==and iamt=10
           1=1 and==
           show==select * from tb2 where 1=1 cond2 cond3
       螢幕將顯示:
           select * from tb2 where iqty=1 and iamt=10
       它擦掉多餘的1=1 ，可以擦掉文字是MIP的編程特色。

  (變數性質二)變數可以置換其下方文字，變更其下方變數的值
       例如下面這程式:
           採購單號==123
           sqlcmd==select * from pur1m where prno='採購單號'
       這裏123將置換sql內的中文，於是形成:
           sqlcmd==select * from pur1m where prno='123'
  
  (變數性質三)變數可以變更它自己的值
       例如下面這程式:
                 iqty==1
                 iqty==eval|iqty+1
       當MIP第二次看到iqty後，不記得iqty以前是1，iqty現在就是2。
       又例如:
                 iqty==0
                 label==op2
                   iqty==eval|iqty+1
                   show==iqty,
                 goto==op2                    
       這裏一再變更iqty的值。執行這段程式將顯示               
           1, 2, 3, ...98, 99, MIP have walked too many steps 
       這段程式本是無限迴圈，但MIP限制只能迴圈99次，所以MIP停下來。  
       
  (變數性質四)變數的值可以含換行符號
       例如下面這程式:
               c001==
                     bb,123
                     cc,456
               d001==ff
       MIP發現 c001 這一行後面沒有字，就往下繼續找，直到下一個==出現，所以
               c001 的值變成 bb,123 (cr) cc,456     其中(cr)代表換行符號
       如果你寫:
               c001==
               d001==ff       
       在c001後面緊接著定義d001，則c001就是空字串。
       
## 既定詞
  既定詞就是預先定義好的字，使用時一定要寫在等號的左手方。
  例如show==123 這個show就是既定詞。既定詞大部分是動詞，舉例如下:
  
  show (既定詞) 促使電腦顯示等號後面的字
         show==123
       將顯示123
      
  append (既定詞) 促使電腦添加文字 
         append,cAdr==台北市
         append,cAdr==文山區
         show==cAdr
       將顯示 台北市(cr)文山區  其中(cr)代表換行符號
       若不要自動添加換行符號的場合，則這麼寫:
         append,addEnter==n //想要就y
         append,cAdr==台北市
         append,cAdr==文山區
         show==cAdr      
       將顯示 台北市文山區
       
       若你曾經聲明append要添加到哪個變數，可以不用再聲明:
         append,cAdr==台北市
         append     ==文山區
         show==cAdr   
       將顯示 台北市文山區
          
  saveToFile (既定詞) 存檔
     (例一 儲存變數內容):     
         append,cAdr==台北市
         append     ==文山區
         saveToFile==c:\tmp\abcd.txt , cAdr
       這促使電腦把cAdr內容存放到c:\tmp\abcd.txt     
     (例二 儲存變數內容其實是程式):     
         mass==
               1234
               5678
               print 1+2;
               print 3+4;
         saveToFile==c:\tmp\abcd.txt , mass
     (例三 檔名可變):    
         fnpp==t22
         mass==
               1234
               5678
         saveToFile==c:\tmp\fnpp.txt , mass
      
      
  loadFromFile (既定詞) 取檔
         loadFromFile==c:\tmp\t22.txt , mass
         show==mass
      這促使電腦去取得等號後面的檔案內容，放進mass這變數裏。
      
  dosCmd (既定詞) 呼叫作業系統
         dosCmd==
           echo 123 >  c:\tmp\t22.dat
           echo 456 >  c:\tmp\t23.dat
      這促使電腦連續執行了兩個指令。
      
  
  conndb (既定詞) 連接資料庫
          conndb==db22
          sqlcmd==select * from mapper
      起初要定義db22在 c:\MIP\webc\cdblist.mip裏，這樣conndb才能夠接上。
      也可以定義HOME在 c:\MIP\webc\cdblist.mip裏，這樣conndb預設接上它。
      從此寫sqlcmd==select * from mapper 一行即可

## 重要既定詞 sqlcmd  
  sqlcmd 用法一: 執行SQL一次，把結果顯示到螢幕上。
            sqlcmd==
            select * into #p from mapper
            select hi='hello', * from #p
         上面這例子展示了SQL可以是多句構成，也可以是純操作update不顯示結果。
         
  sqlcmd 用法二: 執行SQL一次，把結果存到檔案。
            sqlcmd,,f.out==
            select * into #p from mapper
            select hi='hello', * from #p
         這sqlcmd後面兩個逗點，將檔案存到c:\MIP\webc\f.out ，存起內容是:
         hello#!1200
         hello#!2200
         hello#!3200   
         其中#!是預設的分隔符。
               
         
  sqlcmd 用法三: 執行SQL多次，把結果顯示到螢幕上。
         一個SQL句形，可以執行多次，其變化來自矩陣，例如:
             mass==
             11,12
             21,22
             31,32
             sqlcmd,mass==select a='c:fdv01', b=fdv02*100
         在sqlcmd後面接矩陣當參數來源，來源的每一行推動一次SQL，
         現在來源mass有三行，SQL就執行3遍。每次SQL執行前，MIP將
         fdv01置換為當前這一行的第一個元素，fdv02置換為第二個元素，...
         結果顯示
             c:11 ,1200
             c:21 ,2200
             c:31 ,2300
         

  sqlcmd 用法四: 執行SQL多次，把結果存到檔案
             matrix==
             11,12
             21,22
             31,32
             sqlcmd,matrix,f.out==select a='c:fdv01', b=fdv02*100
         在sqlcmd後面接參數來源，來源的每一行推動一次SQL，
         再後面接輸出檔f.out，其儲存內容將是
             c:11#!1200
             c:21#!2200
             c:31#!2300
         其中#!是預設的資料分隔符號。
             
  sqlcmd 用法五: 執行SQL多次，每一次的變化參數來自檔案 
             sqlcmd, f.inp, f.out == select a='oka:fdv01', b='okb:fdv02'


  
  sqlcmd ，其輸入參數的變化:
      sqlcmd       ==SQL 句內不含fdv0這字眼，則SQL只做一次
      sqlcmd,matrix==SQL 句內含有fdv0這字眼，則SQL將做多次
      所以你要預先準備好一個matrix變數，例如:
                      matrix==
                        11,12,13,14
                        21,22,23,24
                      sqlcmd,matrix==select 'fdv01'
      當參數來源是matrix時，matrix這個字可以省略不寫，若是其它就要寫明:
      換個來源變數名，例如                           
                      mass2==
                        11,12,13,14
                        21,22,23,24
                      sqlcmd,mass2==select 'fdv01'
      變數名也可以換成檔名，例如 
                      sqlcmd,f.inp==select 'fdv01'
      其中f.inp是一個檔案，內容是:
                        11 #! 12 #! 13 #! 14
                        21 #! 22 #! 23 #! 24  其中 #! 是預設分隔符。
                      或者內容是                                  
                        11 (tab) 12 (tab) 13 (tab) 14
                        21 (tab) 22 (tab) 23 (tab) 24  其中 (tab) 是跳位符。
                      或者內容是                                  
                        11,12,13,14
                        21,22,23,24
                      欄位間的前後空白無所謂，執行SQL前都忽略。
      
  
  sqlcmd ，其輸出變化:
      sqlcmd,***,screen  ==   則輸出一個html表格到螢幕
      sqlcmd,***         ==   則輸出一個html表格到螢幕
      sqlcmd             ==   則輸出一個html表格到螢幕
      sqlcmd,***,dataString== 則將輸出一長串字到螢幕 [begData]...[endData]
                              如果這sqlcmd是包在某mip程式裏，
                              而這mip程式是被另一程式B經由http喚起，
                              則輸出字串就不是到螢幕，而是被程式B接收，
                              是謂rest呼叫 (restful API)
      sqlcmd,***,top1s   ==   則將SQL所得的第一行以表格樣式顯示到螢幕上:
                                  欄位1名稱, 第一行欄位1的值
                                  欄位2名稱, 第一行欄位2的值
                                  欄位3名稱, 第一行欄位3的值
                              
      sqlcmd,***,top1w   ==   則將SQL所得的第一行顯示到螢幕上，每一欄都可修改:
                                  欄位1名稱, 輸入框[第一行欄位1的值]
                                  欄位2名稱, 輸入框[第一行欄位2的值]
                                  欄位3名稱, 輸入框[第一行欄位3的值]
                              下方有一個[確定]按鈕，用來接收user新改值，
                              詳請請看 往返式輸入範例1。
                              
      sqlcmd,***,top99w  ==   則將SQL所得的每一行每一欄包在一個輸入框裏，顯示到螢幕上:
                                  多行文字輸入框[
                                    第一行欄位1的值, 第一行欄位2的值, 第一行欄位3的值,...
                                    第一行欄位1的值, 第一行欄位2的值, 第一行欄位3的值,...
                                    第一行欄位1的值, 第一行欄位2的值, 第一行欄位3的值,...
                                  ]輸入框結束                                  
                              下方有一個[確定]按鈕，用來接收user新改值，
                              詳請請看 往返式輸入範例2。
                              
                              若要每一行有各自的輸入框，請看 往返式輸入範例3。
                              
      sqlcmd,***,xyz     ==   則將收集SQL所得的每一行的一二三欄，接著新製一表:
                              凡是第一欄的各種值往下延伸，
                              凡是第二欄的各種值往右延伸，
                              凡是第三欄的值填在橫豎延伸出來的表格裏面。
                              用microsoft excel 的名詞來說，就是樞紐分析
                              
                              若是想收集SQL所得的一二三四欄也可以，詳情看[樞紐分析]那一節
                              
      sqlcmd,***,xyzsum  ==   同xyz，但樞紐表之外緣加掛小計與合計，詳情看[樞紐分析]那一節

      
      sqlcmd,***,matrix2 ==   則將結果以字串型態存到變數matrix2裏，變數名稱一定要用matrix開頭
      sqlcmd,***,grid3   ==   則將結果以字串型態存到變數  grid3裏，變數名稱一定要用  grid開頭，此處結果字串已裝飾好<table> <tr> <td>表格字眼
      sqlcmd,***,abc.txt ==   則將結果存到檔案c:\MIP\webc\abc.txt裏
      sqlcmd,***,abc.xml ==   則將結果以XML 格式存到檔案c:\MIP\webc\abc.xml裏
      sqlcmd,***,abc.json==   則將結果以JSON格式存到檔案c:\MIP\webc\abc.json裏
      
  sqlcmd 語法總結: 
      sqlcmd,fromX,toY,DIP==
        some SQL lines(多行)
      其中fromX是SQL輸入區的指稱詞(預設詞 matrix)
      其中toY  是SQL輸出樣式      (預設值 screen)
      其中DIP  是SQL輸出分隔符    (預設值 #!    )
  以上是sqlcmd這個既定詞的詳細說明，全部有哪些既定詞，請看[既定詞全集]那一節
        
## 常用的既定詞
  sqlcmdh 這個詞等於show。 
          我們常常使用 sqlcmd==SQL指令 這樣的句子來查資料庫，
          有時候SQL指令錯誤，我們需要把SQL顯示在螢幕上查錯，
          這時候你就在sqlcmd候面加個h，使SQL句子顯示出來。
    
   askURL 訪問某個網址，取回這網址的回應，例如:
              answ==askURL|https://www.google.com/search?q=perl
              show==inner|answ|UNIX|1987
          將訪問www.google.com 取得回應結果後， 提取介於 UNIX 和 1987
          這兩個字眼之間全部的字，然後顯示出來。
   
   askURLwithPOST 訪問網址，傳送資料給這網址，取回這網址的回應，例如:
              answ==askURL|https://www.google.com/search?q=perl | 12345678
          傳送資料的方法是用POST
              
   ftp
   headList 顯示sqlcmd所得資料時賦與各欄位一個欄位名稱，例如:
                headList==aa,bb
                sqlcmd==select cate,myI1 from mapper
            將顯示
                             aa   bb
                             ---------
                             c1   11
                             c1   22
            如果不規定headList 則顯示原始欄位名稱:
                             cate myI1
                             ---------
                             c1   11
                             c1   22   
   tailList 顯示每欄合計，例如:
                headList==aa,bb
                tailList==  ,y
                sqlcmd==select cate,myI1 from mapper
            將顯示
                             aa   bb
                             ---------
                             c1   11
                             c1   22
                             ---------
                             合計 33
                
   
## 區塊標示類的既定詞
   goto (既定詞) 跳去某一行
                 item==2
                 goto==ifsee| item = 2| work2
                 exit==.
                 
                 label==work2
                 show==say2
       這例子會顯示 say2 . 

         
   if else endif (既定詞) 區塊
           if==ifsee|1=1|then
             show==eq
           else==
             show==neq
           endif==

   most but endmost (既定詞) 是if的變型，延遲到後面才訴說條件。
           most==
             show==11
           but==ifsee|1=2|then
             show==22
           endmost==
        這most是說大部份情況進去show==11，但偶爾有符合but情況時，做but。
        這是為了適合長程式的閱讀。想像某一段程式平常都跑得好好的，
        但偶遇情況要特別處理。按一般程式做法，我們會寫
           if 有特別情況 then
              做特別的事
           else
              做主要的事
           endif
        這樣的語法使得小判斷擋在主要的事之前，干擾閱讀流暢，應改為主要事情在前:
           if 沒有特別情況 then ' most case
              做主要的事
           else
              做特別的事
           endif
        這就是most用詞的由來
        
   for next (既定詞)
           for==i|1|10|2
              show==i-
           next==
       將顯示1-3-5-7-9-
              
   foreach next (既定詞)
           foreach==i|1,3,5,7,9
              show==i-
           next==
       將顯示1-3-5-7-9-
       再舉一例:
           list3==5,7,9
           foreach==i|1,3,list
              show==i-
           next==
       將顯示1-3-5-7-9-
       有人說9的後面還有一個減號，不喜歡。 可以改用向量語法
           show==gu1v|1,3,5,7,9|[vi]|-
       將顯示1-3-5-7-9   ， 後面章節再說明向量語法。
       
   call (既定詞)
       這 call 是跳去某一段副程式，類似goto，但call是跳去又跳回，例:
               call==work2  
               show==s4,
               exit==t
                     func==work2
                     show== s2,
                     return==.
       將顯示 s2, s4, t
       這裏跳去work2之後，遇到return 程式就跳回去。
       return的右方要有值才會觸發動作，return,exit,goto的行為都類似:       
           exit==右方為空白則不動作，有值則跳回。
           exit==右方為空白則不動作，有值則程式結束。
           goto==右方為空白則不動作，有值則跳走。
       
       
       return==空白，則程式不跳回去，例如:       
               call==work2  
               exit==t
                     func==work2
                     show== s2,
                     return==ifsee|1=1|  |wrong
                     show==s3,
                     return==end123  
       第一個return 右方經過計算是空白，繼續往下走
       第二個return 右方end123不是空白，程式就跳回主程式。
       所以顯示: s2, s3, t
       
       若副程式要傳參數，用直線號分隔，用$para1,$para2接收，例如: 
               call==work2|88|99  
               show==s4,
               exit==g123t
                     func==work2
                     g123==$para1
                     show== s2,g123,$para2,
                     return==.
       上例傳了參數88,99所以顯示: s2,88,99, s4, 88t
       
       上例也指出，副程式裏的變數是全程看得到的(golbal variable)。
       
        
       若是副程式的結果要傳出來，把結果寫在return即可，例如:  
               ret4==work2|88|99  
               exit==hh-ret4
                     func==work2
                     g123==$para1
                     return==$para2
       將顯示: hh-99 
  

   
## 函數: 一般函數
      函數就是執行預先定義好的動作，傳回最後的結果，
      MIP裏有很多既定函數，上一節的例子也說明了你可以自己定義函數。
      為了方便，MIP不檢查函數名稱大小寫。 以下列舉各種函數。
      
  eval函數，任意加減乘除:
            show==eval | 1+2*3
            畫面會顯示 7   
            
  
  ifsee函數，若看到判斷式成立則做A，不成立則做B，例如:
      x002==2 
      show==ifsee|x002=2|yes2 |not2  
      畫面會顯示yes2。
  
      ifsee可以搭配goto，例如:
      x002==2 
      goto==ifsee|x002=2|yes2 |not2  
      這樣程式會跳到標號yes2的那一行繼續往下跑。
  
  @函數， 其實函數也可以夾雜在字裏行間使用，例如:
          show== Hi, I was happy in recent @[eval|2*3+1]. days 
      畫面將顯示 Hi, I was happy in recent 7 days    
      也就是整個函數用 @[  和  ]. 括住。 
      @[---]. 是什麼意思呢? @看起來像ca，所以@[---]. 唸作call，即時呼叫的意思。
      @和[ 要緊連在一起寫，而 [---]內各參數則可鬆散，其前後空白將被忽略。

  ifInside函數，檢查A字串有沒有在B字串裏，例如:
      answ==inside| bc | abcd |y|n
      show==answ
      這程式檢查bc有沒有在abcd裏，有就輸出y，沒有就輸出n。 所以顯示y
            
  2@函數， 函數在字裏行間使用時，函數名可以退居第二格，例如:
      ans2==hi,  @[ifInside| bc    | abcd |y|n].
      ans3==hi, 2@[bc      | ifInside| abcd |y|n].
      所得到的ans2和ans3完全相同。 這麼做是為了配合人類口語習慣。
    
  ifBetween函數，檢查A數值有沒有BC之間，或A字串有沒有BC之間，例如:
      show==ifBetween| 2  | 1:3   | y| n
      show==ifBetween| pqr| aa:zz | y| n
      檢查1有沒有在1到3之間， 有
      檢查pqr有沒有在aa到zz之間， 有
      
      show==2@[pqr| ifBetween| aa:zz | y| n ].
  
  edit函數，做文字置換，例如:
      myWord==I like someOne
      show==@[edit|myWord|like=love|someOne=Mary].
      畫面會顯示            I love Mary 
      這函數的參數用法是 舊字=將來新字 ， 各參數用直線號隔開。
  replace函數，做文字置換，等同於edit
  
## 函數: 一維數據函數 向量函數
## 函數: 二維數據函數 矩陣函數
      
## 自定函數 (就是自定副程式最後給返回值)，例如: 
               answ==work2| 11|22
               exit==answ
                     func==work2
                     cacc==eval|$para1+$para2
                     return==cacc
             這程式呼叫函數work2，結果將顯示 33
             
   自定一個求N階乘的函數，例如: 
       answ==factory|7
       exit==eval|answ       
             func==factory
             return==ifsee|$para1=1 |1 
             return==$para1*@[factory|$para1-1].

             
   自定 費波那契 函數，例如: 
       answ==fibo|5   // 這函數主要就是 f(n)= f(n-1) + f(n-2)
       exit==eval|answ       
             func==fibo
             return==ifsee|$para1=0 |0  
             return==ifsee|$para1=1 |1 
             return==@[fibo|$para1-1]. + @[fibo|$para1-2].
   
             
## 程式跑前預解
    (1)凡是程式開跑之前，先檢查有沒有提到include==*** ，有則載入成為程式的一部分。
    (2)凡是跑前看到某一行有//則忽略其右方
        a001==1 //;;b002==2 等效於a001==1 
        //a001==12;;b002==2 等效於則整行忽略。但若這一行有:// 則整行都有效，不忽略。
     
    (3)跑前看到;;這樣連續兩個分號，則置換為換行符號。但若這一行有'uvar'則不置換。   
    (3)跑前看到某行有'for=='  ，下面又有一行'next==' ， 則MIP知道這是for區塊。
## 程式開跑後每一行程式的運作: 洗染、解函、解罩
  (一行程式內部動作1)洗染:
     MIP把每一行辨識為key=value，已記住的(key,value)將置換其下右方文字，例如
         a001==p
         ccbp==q
         show==hi ccba001 
     當程式焦點來到第二行，a001企圖置換這行右方，但沒有符合的字。
     當程式焦點來到第三行，a001仍想置換這行右方，於是第三行變成
         show==hi ccbp 
     當程式焦點在於第三行，ccbp也想置換這行右方，於是第三行變成
         show==hi q 
     於是顯示
               hi q
     程式往下跑，文字被上方文字置換，文字置換簡稱為洗染。

     
  (一行程式內部動作2)解函:                      
     洗染後，若字面上有函數將會被解開，
     舉例一:
            say2==said
            kkkk==ifsee|1=1| say2 y |say n   
         這kkkk等號右方是一個函數，於是解開函數，成為
            kkkk==said y
     舉例二: 
            say2==said     
            kkkk==hello @[ifsee|1=1| say2 y |say2 n].,cc 
         這@函數夾雜於字裏行間，於是@函數被解開，成為
            kkkk==hello said y, cc
     舉例三:
         若遇@函數內層還有@函數，應該先解開內層:
            aa02==1
            kk02==see @[ifsee| 2 = @[add|aa02|1]. | two | unknown]. so what
         則變化為
            kk02==see @[ifsee| 2 =  2              | two | unknown]. so what
         再變化為
            kk02==see two so what
    
     有時候當外層是gu**函數時，內層函數卻是延後解開，就是gu**函數先解，內層@函數後解。
     舉例四:
            aaaa==1
            show==gu1v|4,5,6  |  @[add|aaaa|[vi]].  |  +
         它被洗染變成
            show==gu1v|4,5,6  |  @[add|1   |[vi]].  |  +
         由於gu開頭的函數被設計成優先於內層，所以先解gu
            show==@[add|1|4]. + @[add|1|5]. + @[add|1|6]. 
         再後解@函數
            show==5 + 6 + 7
         於是顯示
                5 + 6 + 7  
     為甚麼有時候內層函數要後解? 
     就像一顆糖球外殼先溶解，裏面的小球再溶解，瞬間在舌尖釋放出繽紛的味道。
     只有後解開才能釋放出繽紛的程式碼，大量減低你的碼字寫作。
     給它取個英文名吧: call-inside-function-after-vector-solved 
                 
  (一行程式內部動作3)解罩
     當某個字不想被洗染，程式師可以故意把[]擠在這個字裏，例如:     
        aaaa==2
        show==I say a[]aaa=aaaa
     畫面應顯示 
        I say a[]aaa=2
     這個[]是一個既定詞，我們可以把它唸作'遮罩'其用途是防止洗染。
     凡是當左方既定詞要接收右方值之前，MIP自動把[]去掉，稱為'解罩'。
     在這例中，當show要接收右方值之前，MIP自動把[]去掉，所以實際顯示為:
        I say aaaa=2
     
     什麼樣的字在進入左方之前會被'解罩'呢，這樣的字只有幾個:
     []      換成 無
     $space  換成 一個空白格
     $enter  換成 一個換行符號 ( ascii_10+ ascii_13 )
     $and    換成 一個空白格and一個空白格
     $fncall 換成 @
     $fnpipe 換成 |
     
     
  (一行程式內部動作,總結) MIP處理一行程式的動作順序是:
     凡是遇到 kkkk==vvvv 這樣的句子，前面認識的既定詞依序灌進去洗染右方，
     洗染後裏面也許有函數，那就解函。
     解函後裏面也許有遮罩，那就解罩。
     處理後的值傳給左方kkkk，若kkkk是一個既定詞，那就做既定的事，
     然後再跑下一行，程式就這麼一行一行運作。
                 

##預先定義好的既定詞 全集 

                   
## 函數 全集 
 
 二者擇一的一些函數:
   ifNum      若為數字         例: ifNum     | 1.2     |yes|no
   ifPosi     若為正數         例: ifPosi    | 123     |yes|no
   ifValueful 若有值非空字串   例: ifValueful| aaa     |yes|no                                  
   ifSee      若等於           例: ifSee     | 2=2     |yes|no   
              若小於           例: ifSee     | 1<2     |yes|no       
              若大於           例: ifSee     | 2>1     |yes|no
              若不等於         例: ifSee     | 1<>2    |yes|no
              若小於等於       例: ifSee     | 1<=2    |yes|no
              若大於等於       例: ifSee     | 1>=2    |yes|no   
                                             
   ifUUEq     若改大寫後相等   例: ifUUEq    |HH |hh   |yes|no
   ifLenEq    若字的長度相等   例: ifLenEq   |ab |cd   |yes|no
   ifInside   若是個子字串於   例: ifInside  |bc |abcd |yes|no
   ifBetween  若介於某某之間   例: ifBetween |bb |aa:dd|yes|no
   ifValueful 若參數有值(非空字串)，舉例說明一下這函數:
                jqty==456
                cond==ifValueful|jqty|  and iqty=jqty
                show==select * from tb where 1=1 cond          
              將顯示      select * from tb where 1=1 and iqty=456
              同樣的例子但這次jqty是空字串 
                jqty== 
                cond==ifValueful|jqty|and iqty=jqty
                show==select * from tb where 1=1 cond          
              將顯示      select * from tb where 1=1      因為 jqty無值
              由於ifValueful太常用，它也可簡寫為ifv
              上例又可以緊湊寫成一行:   
                show==select * from tb where 1=1 @[ifv|jqty|and iqty=jqty].
                 
 有關日期的一些函數:                     
   cdate       改正零亂日期寫法  例: dateConv    |Jan 9,91            將顯示 1991/01/09 也就是一律改為yyyy/mm/dd
   ifDate      是否有這個日期    例: ifDate |20040102  |y|n           將顯示 y
   dateDiff    兩日期之間距      例: dateDiff    |20040102|20040103   將顯示 1
   dateAdd     西元年加一些天數  例: dateAdd     |1991/01/09|3        將顯示 1991/01/12
                                 例: dateAdd     |19910109  |4        將顯示 1991/01/13  
                                                                                       
   以下這三個函數的參數必須是yyy/mm/dd型態或yyymmdd型態或是now，也就是民國年必須3位數。
   ifDateROC   是否有這個日期    例: ifDateROC   |1030102  |y|n       將顯示 y
   dateDiffROC 兩日期之間距      例: dateDiff    |1020304  |1020305   將顯示 1                  
   dateAddROC  民國年加天數      例: dateAddROC  |102/01/09|3         將顯示 102/01/12
                                 例: dateAddROC  |1020109  |4         將顯示 102/01/13 
               這函數的參數必須是yyy/mm/dd型態或yyymmdd型態或是空白
               
                   
               
               
 其它函數:
   eval     各種加減乘除     例: eval| (2*3+1)*2+1
   ifeqs    z值若等於xii則yi 例: ifeqs|z999| x2|y2|  x3|y3|  x4|y4
                              實例: 
                                    z999==2
                                    show==ifeqs|z999|  1|s1|   2|s2|   3|s3
                            將顯示: s2
   andRange  製造一段SQL的查詢條件 例:
             input12==2004/01/02:2004/03/02
             condit ==andRange|kdate|input12
             show   ==where 1=1 condit     
             將顯示   where 1=1 and( kdate between '2004/01/2' and '2004/03/02')
         又例如:         
             kdateR1R2==
             condition==andRange|kdate|kdateR1R2
             show     ==where 1=1 condition     
             將顯示     where 1=1         
             也就是當使用者不填寫inputsR1R2時，讓SQL句子不含kdate這條件
         又例如:         
             kdateR1R2==2004/01/2
             condition==andRange|kdate|kdateR1R2
             show     ==where 1=1 condition     
             將顯示     where 1=1 and( kdate like '2004/01/2%' )
             它採用相似比對而不是等於。
                   
   inner     取界內的值       例: show==inner    |I Love Mary|I|M  將顯示 Love
   mobileTel 電話號碼前面補0  例: show==mobileTEL|988112233        將顯示 0988112233
   cookieW   對某cookie寫值   例: easy==cookieW  |cook22     |123  這idle是臨時定義一個不會用到的變數
   cookieR   對某cookie拿值   例: c22v==cookieR  |cook22           這樣c22v的值就是123， 網頁來回一直記得
   intrnd    取亂數           例: show==intrnd   |99               這樣將得一個0到98間的某個數  
   transport 轉置矩陣         例: mass==
                                    a1,b1
                                    a2,b2
                                    a3,b3    
                                    a4,b4                                    
                                  show==transport|mass  
                              將顯示
                                  a1,a2,a3,a4
                                  b1,b2,b3,b4
                                  
   edit      編輯一個變數     例: show==edit|abcd|a=1,b=2  
                              將顯示         12cd
                              其中 a=1表示a要換成1 ，b=2表示b要換成2
                              
   replace   編輯一個變數， 和上面的edit函數完全同義 
   
   max       取最大         舉例: show==max|Mary|John|Vivian 將顯示Vivian
                            又例: show==max|12  |15  |9      將顯示9
   min       取最小，和上例相反
                
   convert_to_clang
   gu1v
   gu2v
   gu2vx
   gu1m
   atom
   ucase
   lcase
   mid
   len
   midstring
   left
   right
   rightto
   intrnd
   ifhasfile
   askurl
   askurlwithpost

   top1r     對於剛執行完畢的SQL，取其結果的第一行的各欄位，製成變數，例如:
             sqlcmd==select cate,myKy,myI1 from mapper
             pppp,qqqq,rrrr==top1r|1,3,2
             show==[pppp]+[qqqq]+[rrrr]
             如果sqlcmd的結果的第一行是 c1, k11, 11 
             將顯示:                  [c1]+[11]+[k11]
             此函數在此例中建立了三個變數: pppp,qqqq,rrrr
   matchtodaycode
   ftpupload
   ftpdownload   
   postwall
   buildEmptyTable
   merge
   andrange
   quote
   red


      
		  
                         
##增刪修查 資料表
 #查詢多筆資料
 #新增多筆資料
 #新增一筆資料
 #刪除一筆資料
 #修改一筆資料
 #增刪修查一起工作

##顯示資料直轉橫(顯示樞紐報表)

##多維度靈活查詢

  
## 編輯功能清單
  本軟體把一個公司需要的眾多功能顯示在一頁畫面上，讓使用者點選。
  要編輯功能清單就打開c:\MIP\webc\cSPlist.mip，看到如下內容:
    [td]  
    [tf]功能段代號A, 功能段名稱A
        程式檔名1,   程式名稱1  
        程式檔名2,   程式名稱2  
    [tf]功能段代號B, 功能段名稱B
        程式檔名3,   程式名稱3  
        程式檔名4,   程式名稱4 
  以[td]開頭的這一行使功能清單向右換欄，以免清單往下太長。
  以[tf]開頭的這一行代表其下方一小段是一個功能段，
  將來在cusList.txt裏可以指定某人可以操作幾個功能段。
 
## 編輯使用者清單
  本軟體可以管理使用者權限，
  打開c:\MIP\webc\cUSlist.mip
  每一行的欄位依序是姓名、帳號、密碼、 公司名稱、 部門名稱、 員工工號、 可允許使用的功能段
  本軟體可以允許多個公司多個部門的人員一起使用 所以要寫下 公司名稱 部門名稱 員工工號 
  若只允許某人僅能使用某3個功能段 則在 "可允許使用的功能段" 那欄寫上3個功能段名稱，例如 aa bb cc，
  若要允許某人可以使用全部功能段  則在 "可允許使用的功能段" 那欄寫上all

## 編輯資料庫清單
  MIP的基本運作不需資料庫，若你讓它連接到多個資料庫，它就如虎添翼。
  連接方式如下，打開 c:\MIP\webc\cDBlist.mip 看到如下內容
     HOME      : ms    : some connection string1
     db123     : ms    : some connection string2
     db456     : ms    : some connection string3
  第一行宣告一個預設的資料庫，將來寫程式沒說連接哪個資料庫，就是連接這一個       
  第二行宣告一個稱謂db123，以後只要說連接db123， MIP就去連接這資料庫
  接著在MIP工程畫面輸入一些字，舉例:
      conndb==db123
      sqlcmd==select * from tb2
  就可看到資料表 tb2 了
  
## 庫存撿貨系統
  想像你要建造一個庫存撿貨系統，軟體工程第一步收集需求。需求是:
  (1)倉庫要有儲位，入庫時隨意放置，出庫時要顯示儲位引導人員撿貨。
  (2)要能顯示存放最久的那些商品，進倉庫商品的平均存放時間是多久?
  
  軟體工程第二步 設計能顯示上述資料的記錄簿，也就是資料表格。
  既然要看商品的進出時間，何不讓記錄的每一行就是記載著商品的入庫到出庫過程?
  當入庫3顆蘋果，每顆出庫時間都不同，何不讓每一行就記載著單一顆商品的過程?
  於是表格命名為 oplife 欄位如下:
  每行流水號, flow int(1,1)    資料庫引擎會自動填入值，由1起，每行加1
  入庫批號,   inno varchar(16) 
  入庫日期,   indt varchar(16)
  商品代號,   skno varchar(16)
  放置儲位,   ceno varchar(16)
  出庫批號,   ouno varchar(16)
  出庫日期,   oudt varchar(16)   
  
  軟體工程第三步 列出各個場景，其中之一是入庫
  有3顆蘋果5顆橘子要入庫，隨貨附有商品清單，清單上有採買編號。
  人員帶著商品站到儲位A2，放上3顆蘋果，在貨單上蘋果那一行註記A2,3
  人員帶著商品站到儲位B2，放上3顆橘子，在貨單上橘子那一行註記B2,3
  人員帶著商品站到儲位C2，放上2顆橘子，在貨單上橘子那一行註記C2,2
  人員回到辦公桌，要把註記輸入電腦。
   
  軟體工程第四步 寫這個入庫功能，編輯文字檔in02.mip，內容如下
      採買編號==
      以下填入商品,儲位,數量(填入前先把下框文字清掉) 
      入庫明細==
      蘋果,A1,1
      橘子,B2,2
      #1#2
      opdt==dateadd||0
      sqlcmd==
           select inno,indt,skno,ceno, iqty=0 into #p from oplife where 1=2
      sqlcmd,入庫明細==
           insert into #p ('採買編號', 'opdt', 'fdv01','fdv02','fdv03')
      sqlcmd==          
           begin2:
             insert into oplife (inno,indt,skno,ceno) from #p where iqty>0
             update #p set iqty=iqty-1; delete #p where iqty<=0
           if exists (select * from #p) goto begin2
      show==入庫記錄完成
  編輯文字檔完成，存起來。
   
  再列出另一個場景，是撿貨準備出庫
  有2顆蘋果2顆橘子要撿貨準備出庫，出庫單編號Q33已印成紙，紙上有商品明細。
  希望讓電腦顯示商品位置以方便人員撿貨。於是編輯文字檔in02.mip，內容如下
      撿貨前請填入商品,數量。電腦會告訴你儲位
      填入前請先把下框文字清掉
      出庫明細==
      蘋果,1
      橘子,2
      #1#2
      sqlcmd,出庫明細==
      --最早入庫的 優先出庫 所以下一行寫order by flow
      select top ftv02 skno,ceno from oplife where skno='fdv01' order by flow
      show==應撿貨儲位如上
  編輯文字檔完成，存起來。         
  
   
  再列出另一個場景，是出庫完成後的登載。於是編輯文字檔ou02.mip，內容如下
      出庫編號==
      以下填入商品,儲位,數量(填入前先把下框文字清掉) 
      出庫明細==
      蘋果,A1,1
      橘子,B2,2
      #1#2
      opdt==dateadd||0      
      sqlcmd==
        select inno,indt,skno,ceno, iqty=0 into #q from oplife where 1=2
      sqlcmd,入庫明細==
        insert into #p ('採買編號', 'opdt', 'fdv01','fdv02','fdv03')
      sqlcmd==          
        begin2:
          declare @flow as int,   @skno as varchar(16)
          select @flow=min(flow), @skno=min(skno) from oplife where
            skno=(select top 1 skno from #q where iqty>0) and ouno is null
          update oplife set ouno='出庫編號', oudt='opdt' where flow=@flow
          update #q set iqty=iqty-1 where skno=@skno
          delete #q where iqty<=0
        if exists (select * from #q) goto begin2
      show==出庫記錄完成
  編輯文字檔完成，存起來。
  
   
  再另一個功能，希望顯示商品平均放在倉庫多久。於是編輯文字檔LF01.mip，內容如下
      #1#2
      sqlcmd==
       select 平均庫齡=convert(
                               varchar, avg(  datediff(d,indt,getdate())  ) 
                              )+'天'    from oplife where oudt is null
  編輯文字檔完成，存起來。
       
       

 

## 跨資料庫傳輸: 把文字檔轉入DB
            dataFrom
            dataTo

## 跨資料庫傳輸: 經記憶體傳輸資料
## 跨資料庫傳輸: 經檔案多批次傳輸資料

## 呼叫外界: 發信
## 呼叫外界: 發簡訊
## 呼叫外界: URL get, post
## 呼叫外界: ftp
## 呼叫外界: 呼叫window command 或呼叫exe

## 被外界呼叫: URL get,post
## 被外界呼叫: 被VB, 被排程器

## 宏編程的優點: 編程可以分層次
   其實程式會慢慢長大，長大成一隻恐龍，你無法想像它原始模樣。
   例如有一個程式，原本3個步驟結束，很短。
   後來你覺得在某情形下，應執行另外3個步驟，於是添加if上去，程式變長了。
   後來又想記錄程式過程，每一步驟都要寫檔記住開始，記住結束，程式更長。
   若以宏寫作，凡是添加的句子都命名為一段宏，
   那麼當你把宏清空，就可以顯出小娃模樣，當你把宏充滿，就顯示恐龍模樣。
   
   
## 矩陣式編程的優點: 程式可以對比
   例如有兩個程式，
   A程式為aa;         bb;               cc; dd;             ff
   B程式為aa; forEach;bb;if item=1 then cc; dd;endEach; ee; ff
   其中aa,bb,cc,dd,ee,ff 都是幾十行程式。當你鋪陳開來就造成視覺困擾。
   若把aa,bb,cc,dd,ee,ff 都寫成副程式更麻煩，因為有很多參數要傳遞。
   若把程式改用矩陣式表達法，卻很簡單:
       matrix==
          aa  , aa
              , forEach
          bb  , bb
          cc  , 
              , if item=1 then cc
          dd  , dd
              , endEach
              , ee
          ff  , ff
       programA==gu1m|matrix|[mi1]|$enter
       programB==gu1m|matrix|[mi2]|$enter
   這樣是不是很清楚呢
   
   也可以改成這麼寫:
       matrix==
          AB, aa
          .B, forEach
          AB, bb
          A., cc
          .B, if item=1 then cc
          AB, dd
          .B, endEach
          .B, ee
          AB, ff
       programA==gu1m|matrix|[mi2]|$enter|1A
       programB==gu1m|matrix|[mi2]|$enter|1B
   在matrix中第一個欄位中有A，就是A程式會用到，
   在matrix中第一個欄位中有B，就是B程式會用到，
   這樣是不是更清楚又簡短呢
   
   
## 怎樣減少軟體編程的時間
  要減少編程的時間，其方法都是把軟體寫作由申論題降為填充題，再降為選擇題。
  先由資深人員定骨架，骨架間留有空格，再由資淺人員把材料填進空格裏。
  但世界沒這麼美好，某套骨架只能適用於某些場景，換場景要換別套。
  
  有人宣傳物件導向的作法，也就是變數應盡量封裝，宣傳說編程的時間減少。
  然而過度的物件導向也就過度的封裝，多出很多封裝紙，封裝間傳訊息就變難了。
  所以變數全部封裝或和變數全部裸露，工程師要有智慧判斷。

  有人宣傳前端後端分解法，前後之間由各種指位詞串接，宣傳說編程的時間減少。
  這些串接的指位詞有時候散落程式各處，變成很難收攏的葉片，複雜度反而升高，
  不如前後端合併更節省編程時間，工程師要有智慧判斷。
  
## 在古老的語言中 怎樣寫物件導向的程式?
  物件導向主要用處就是封裝變數，改善變數太多被誤觸的問題。
  所以這個問題應改為:一些古老的語言沒有物件導向的語法，如何封裝變數?
  解法就是寫一個副程式，內部有靜態變數(也就是離開副程式後，變數的值不清空)。
  以 '取號器' 為例:
  有一個銀行，要讓辦理國幣的民眾排一路，要辦外匯的排一路。各路各發號碼牌。
  銀行可以讓一個人站在門口發號碼牌，簡便則是在門口放一個印製號碼紙的機器。
  程式這樣寫:
    n1=counter("addQu1") : print "國幣",n1
    n2=counter("addQu2") : print "外匯",n2    
    function counter(method) 
     static m1,m2 
     if method="addQu1" then m1=m1+1: return m1
     if method="addQu2" then m2=m2+1: return m2
    end function
  這樣子 m1 只有預定的字眼addQu1才能驅動它，程式的其它部份都動不了它。
  其中 n1=counter("addQu1") 就相當於物件導向的寫法 n1=counter.addQu1


## 輸入畫面集解  
  輸入框基本型:
        名字== 
        #1#2    
        show==hello 名字
            使用者看到的畫面就是 名字 冒號 一個輸入框 
            使用者填寫Mary
            使用者看到hello Mary
  輸入框後加字:
        名字==  $, 請寫人名
        #1#2    
        show==hello 名字
            使用者看到的畫面就是  名字 冒號 一個輸入框 請寫人名
            使用者填寫Mary
            使用者看到hello Mary
  輸入框拉長:
        名字==  $, 請寫人名 $, iibx~50
        #1#2    
        show==hello name2 
            使用者看到的畫面就是  名字 冒號 一個輸入框 請寫人名
            輸入框的長度變長了，可以容納50個字以上

  框右之框:
        x001==1 $,請寫數字 $, iibx
        x002==2 $,請寫數字 $, iib2
        #1#2
        show==(x001,x002)
               則使用者看到一個輸入框x001， 在其右方還有一個輸入框x002

  框右之框:
        x001==1 $,請寫數字 $, iibx
        x002==2 $,請寫數字 $, iib2
        x003==3 $,請寫數字 $, iib2
        #1#2
        show==(x001,x002,x003)
               則使用者看到一框x001， 右方還有一框x002， 右方還有一框x003
               這樣設計當然是為了佔滿螢幕，一框佔螢幕一行很浪費          
  
  多行輸入框:
        name2==John $, 請寫人名 $, mmbx~20x80
        #1#2    
        show==hello name2 
            畫面就是一個大型輸入框，框往下20行 往右80格，框右有字 請寫人名
   
  下拉選擇框:
        name2== $, 請寫人名 $, comb~John$s1,Tony$s2,Jack$s3
        #1#2    
        show==hello name2 
            畫面就是一個下拉選擇框。選一個人名，按確定後
            畫面顯示  hello s1  (或是 hello s2 如果你選了Tony)
     
  勾選框:
        answ==    $, yes or no  $, checkbox
        #1#2    
        show==hello answ 
            則使用者看到的畫面就是一個勾選框。
            不勾按確定 則顯示N
            勾了按確定 則顯示Y
  上傳框:
        請選一檔案== $, $, file
        你好嗎    ==
        #1#2
        show==你好嗎  
            則使用者除了看到你好嗎，還會把檔案傳到主機的這資料夾 c:\MIP\webc\
               
  無框 純粹一行說明字:
        name2==
        give a boy name
        #1#2    
        show==hello name2 
            輸入框下方有一行字: give a boy name
   
  無框 純粹一行說明字的第二種寫法，用comment開頭來命名變數
        name2==John $, 請寫人名 $, mmbx~20x80
        comment2==write something
        #1#2    
        show==hello name2 
            畫面就是一個輸入框，下方有字 write something
   
  無框 純粹一行說明字的第三種寫法，用comment暗示
        name2==John $, 請寫人名 $, mmbx~20x80
        anything==write something $, $, comment
        #1#2    
        show==hello name2 
            畫面就是一個輸入框，下方有字write something
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框，長度20
       a002==hello
	   
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框，長度20，框右方有提示文字 say anything
       a002==hello $, say anything 
	   
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框，長度30，框之右方有提示文字 say anything 
       a002==hello $, say anything $, 30
	   
   下面這一行 在應用模式下 會顯示成 a002: 後面帶一個輸入框  框之右方有提示文字 say anything 而框的長度拉長為30
       a002       ==hello    $,  say anything $, iibx~30
	   key        ==value    $,  explainWord  $, typeWord   ( typeWord could be   "epwd"    "iibx"    "iib2"    "entr"    "hidn"    "mmbx"    "comb"   "ckbx"  )
	   ikey(cmNxy)  ival(cmNxy)    imrk(cmNxy)     ptyps(cmNxy) 
       
## 往返式輸入範例123	   
## 樞紐分析

## 安裝問題集解  
  (問)找不到這電腦上的IIS管理員
  (解)    若有看到[伺服器管理員]這圖示，點它，進去看到角色，
          角色下有網頁伺服器， 對它按右鍵新增角色服務，就可顯示IIS
    
  (問)輸入網址 MIP/MIP.aspx 看不到登入畫面， 卻看到 HTTP錯誤404.17  
  (解)    應檢查ASP.NET有沒有安裝，也就是:
          開始> 控制面板> 程序和功能> 打開或關閉Windows功能> 
          Internet信息服務> 網際網路服務> 應用程序開發功能> ASP.NET
          把這個勾起來
    
  (問)當webc目錄被設定共用後，IIS卻說虛擬目錄不存在，說沒有web.config
  (解)    不須添加web.config ，只要進iis-manager 按右鍵> 管理虛擬目錄> 
          進階設定> 實體路徑認證， 打入有存取權限的帳號密碼即可
          順便的，IIS寫檔案不成功的問題也解了
    
  (問)畫面說程式有錯，但不能顯示明確原因
  (解)    在github檔案區還有一個小檔案web.config，複製到c:\MIP\webc即可。
    
  (問)畫面說 c:\mip\webc 不能寫檔
  (解)    進iis-manager 按右鍵> 管理虛擬目錄> 進階設定> 實體路徑認證， 打入有存取權限的帳號密碼
          或是用檔案總管

    
  (問)資料庫設定檔會被使用者看到，想隱蔽它
  (解)    在c:\MIP\webc之旁另開資料夾 c:\MIP\webd, c:\MIP\webt, c:\MIP\webq
          把c:\MIP\webc\*.mip移動到這 c:\MIP\webd
          編輯c:\MIP\webc\mip.aspx大約第80行位置:
          請把 codFord=CCFD & "webc\" :tmpFord=CCFD & "webc\" :queFord=CCFD & "webc\" 
          改成 codFord=CCFD & "webd\" :tmpFord=CCFD & "webt\" :queFord=CCFD & "webq\"
          存起 c:\MIP\webc\mip.aspx 即完成。
